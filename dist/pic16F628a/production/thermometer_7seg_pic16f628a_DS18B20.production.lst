

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Nov 30 13:09:09 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Generated 12/10/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F628A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0004                     fsr             equ	4
    61     0004                     fsr0            equ	4
    62     0000                     indf            equ	0
    63     0000                     indf0           equ	0
    64     0002                     pc              equ	2
    65     0002                     pcl             equ	2
    66     000A                     pclath          equ	10
    67     0003                     status          equ	3
    68     0000                     INDF            equ	0	;# 
    69     0001                     TMR0            equ	1	;# 
    70     0002                     PCL             equ	2	;# 
    71     0003                     STATUS          equ	3	;# 
    72     0004                     FSR             equ	4	;# 
    73     0005                     PORTA           equ	5	;# 
    74     0006                     PORTB           equ	6	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000E                     TMR1            equ	14	;# 
    79     000E                     TMR1L           equ	14	;# 
    80     000F                     TMR1H           equ	15	;# 
    81     0010                     T1CON           equ	16	;# 
    82     0011                     TMR2            equ	17	;# 
    83     0012                     T2CON           equ	18	;# 
    84     0015                     CCPR1           equ	21	;# 
    85     0015                     CCPR1L          equ	21	;# 
    86     0016                     CCPR1H          equ	22	;# 
    87     0017                     CCP1CON         equ	23	;# 
    88     0018                     RCSTA           equ	24	;# 
    89     0019                     TXREG           equ	25	;# 
    90     001A                     RCREG           equ	26	;# 
    91     001F                     CMCON           equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     008C                     PIE1            equ	140	;# 
    96     008E                     PCON            equ	142	;# 
    97     0092                     PR2             equ	146	;# 
    98     0098                     TXSTA           equ	152	;# 
    99     0099                     SPBRG           equ	153	;# 
   100     009A                     EEDATA          equ	154	;# 
   101     009B                     EEADR           equ	155	;# 
   102     009C                     EECON1          equ	156	;# 
   103     009D                     EECON2          equ	157	;# 
   104     009F                     VRCON           equ	159	;# 
   105     0000                     INDF            equ	0	;# 
   106     0001                     TMR0            equ	1	;# 
   107     0002                     PCL             equ	2	;# 
   108     0003                     STATUS          equ	3	;# 
   109     0004                     FSR             equ	4	;# 
   110     0005                     PORTA           equ	5	;# 
   111     0006                     PORTB           equ	6	;# 
   112     000A                     PCLATH          equ	10	;# 
   113     000B                     INTCON          equ	11	;# 
   114     000C                     PIR1            equ	12	;# 
   115     000E                     TMR1            equ	14	;# 
   116     000E                     TMR1L           equ	14	;# 
   117     000F                     TMR1H           equ	15	;# 
   118     0010                     T1CON           equ	16	;# 
   119     0011                     TMR2            equ	17	;# 
   120     0012                     T2CON           equ	18	;# 
   121     0015                     CCPR1           equ	21	;# 
   122     0015                     CCPR1L          equ	21	;# 
   123     0016                     CCPR1H          equ	22	;# 
   124     0017                     CCP1CON         equ	23	;# 
   125     0018                     RCSTA           equ	24	;# 
   126     0019                     TXREG           equ	25	;# 
   127     001A                     RCREG           equ	26	;# 
   128     001F                     CMCON           equ	31	;# 
   129     0081                     OPTION_REG      equ	129	;# 
   130     0085                     TRISA           equ	133	;# 
   131     0086                     TRISB           equ	134	;# 
   132     008C                     PIE1            equ	140	;# 
   133     008E                     PCON            equ	142	;# 
   134     0092                     PR2             equ	146	;# 
   135     0098                     TXSTA           equ	152	;# 
   136     0099                     SPBRG           equ	153	;# 
   137     009A                     EEDATA          equ	154	;# 
   138     009B                     EEADR           equ	155	;# 
   139     009C                     EECON1          equ	156	;# 
   140     009D                     EECON2          equ	157	;# 
   141     009F                     VRCON           equ	159	;# 
   142     0000                     INDF            equ	0	;# 
   143     0001                     TMR0            equ	1	;# 
   144     0002                     PCL             equ	2	;# 
   145     0003                     STATUS          equ	3	;# 
   146     0004                     FSR             equ	4	;# 
   147     0005                     PORTA           equ	5	;# 
   148     0006                     PORTB           equ	6	;# 
   149     000A                     PCLATH          equ	10	;# 
   150     000B                     INTCON          equ	11	;# 
   151     000C                     PIR1            equ	12	;# 
   152     000E                     TMR1            equ	14	;# 
   153     000E                     TMR1L           equ	14	;# 
   154     000F                     TMR1H           equ	15	;# 
   155     0010                     T1CON           equ	16	;# 
   156     0011                     TMR2            equ	17	;# 
   157     0012                     T2CON           equ	18	;# 
   158     0015                     CCPR1           equ	21	;# 
   159     0015                     CCPR1L          equ	21	;# 
   160     0016                     CCPR1H          equ	22	;# 
   161     0017                     CCP1CON         equ	23	;# 
   162     0018                     RCSTA           equ	24	;# 
   163     0019                     TXREG           equ	25	;# 
   164     001A                     RCREG           equ	26	;# 
   165     001F                     CMCON           equ	31	;# 
   166     0081                     OPTION_REG      equ	129	;# 
   167     0085                     TRISA           equ	133	;# 
   168     0086                     TRISB           equ	134	;# 
   169     008C                     PIE1            equ	140	;# 
   170     008E                     PCON            equ	142	;# 
   171     0092                     PR2             equ	146	;# 
   172     0098                     TXSTA           equ	152	;# 
   173     0099                     SPBRG           equ	153	;# 
   174     009A                     EEDATA          equ	154	;# 
   175     009B                     EEADR           equ	155	;# 
   176     009C                     EECON1          equ	156	;# 
   177     009D                     EECON2          equ	157	;# 
   178     009F                     VRCON           equ	159	;# 
   179     0000                     INDF            equ	0	;# 
   180     0001                     TMR0            equ	1	;# 
   181     0002                     PCL             equ	2	;# 
   182     0003                     STATUS          equ	3	;# 
   183     0004                     FSR             equ	4	;# 
   184     0005                     PORTA           equ	5	;# 
   185     0006                     PORTB           equ	6	;# 
   186     000A                     PCLATH          equ	10	;# 
   187     000B                     INTCON          equ	11	;# 
   188     000C                     PIR1            equ	12	;# 
   189     000E                     TMR1            equ	14	;# 
   190     000E                     TMR1L           equ	14	;# 
   191     000F                     TMR1H           equ	15	;# 
   192     0010                     T1CON           equ	16	;# 
   193     0011                     TMR2            equ	17	;# 
   194     0012                     T2CON           equ	18	;# 
   195     0015                     CCPR1           equ	21	;# 
   196     0015                     CCPR1L          equ	21	;# 
   197     0016                     CCPR1H          equ	22	;# 
   198     0017                     CCP1CON         equ	23	;# 
   199     0018                     RCSTA           equ	24	;# 
   200     0019                     TXREG           equ	25	;# 
   201     001A                     RCREG           equ	26	;# 
   202     001F                     CMCON           equ	31	;# 
   203     0081                     OPTION_REG      equ	129	;# 
   204     0085                     TRISA           equ	133	;# 
   205     0086                     TRISB           equ	134	;# 
   206     008C                     PIE1            equ	140	;# 
   207     008E                     PCON            equ	142	;# 
   208     0092                     PR2             equ	146	;# 
   209     0098                     TXSTA           equ	152	;# 
   210     0099                     SPBRG           equ	153	;# 
   211     009A                     EEDATA          equ	154	;# 
   212     009B                     EEADR           equ	155	;# 
   213     009C                     EECON1          equ	156	;# 
   214     009D                     EECON2          equ	157	;# 
   215     009F                     VRCON           equ	159	;# 
   216                           
   217                           	psect	idataBANK0
   218     032A                     __pidataBANK0:
   219                           
   220                           ;initializer for _start_delay
   221     032A  3402               	retlw	2
   222     032B  3400               	retlw	0
   223                           
   224                           ;initializer for _temp
   225     032C  34E8               	retlw	232
   226     032D  3403               	retlw	3
   227     0005                     _PORTA          set	5
   228     001F                     _CMCON          set	31
   229     0028                     _RA0            set	40
   230     002F                     _RA7            set	47
   231     002E                     _RA6            set	46
   232     002C                     _RA4            set	44
   233     0037                     _RB7            set	55
   234     0036                     _RB6            set	54
   235     0035                     _RB5            set	53
   236     0034                     _RB4            set	52
   237     0033                     _RB3            set	51
   238     0032                     _RB2            set	50
   239     0031                     _RB1            set	49
   240     0030                     _RB0            set	48
   241     0086                     _TRISB          set	134
   242     0085                     _TRISA          set	133
   243     0428                     _TRISA0         set	1064
   244                           
   245                           	psect	cinit
   246     07F2                     start_initialization:	
   247                           ; #config settings
   248                           
   249     07F2                     __initialization:
   250                           
   251                           ; Initialize objects allocated to BANK0
   252     07F2  232A               	fcall	__pidataBANK0	;fetch initializer
   253     07F3  00B6               	movwf	__pdataBANK0& (0+127)
   254     07F4  232B               	fcall	__pidataBANK0+1	;fetch initializer
   255     07F5  00B7               	movwf	(__pdataBANK0+1)& (0+127)
   256     07F6  232C               	fcall	__pidataBANK0+2	;fetch initializer
   257     07F7  00B8               	movwf	(__pdataBANK0+2)& (0+127)
   258     07F8  232D               	fcall	__pidataBANK0+3	;fetch initializer
   259     07F9  00B9               	movwf	(__pdataBANK0+3)& (0+127)
   260                           
   261                           ; Clear objects allocated to BANK0
   262     07FA  01B2               	clrf	__pbssBANK0& (0+127)
   263     07FB  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   264     07FC  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   265     07FD  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   266     07FE                     end_of_initialization:	
   267                           ;End of C runtime variable initialization code
   268                           
   269     07FE                     __end_of__initialization:
   270     07FE  0183               	clrf	3
   271     07FF  2C75               	ljmp	_main	;jump to C main() function
   272                           
   273                           	psect	bssBANK0
   274     0032                     __pbssBANK0:
   275     0032                     _counter:
   276     0032                     	ds	2
   277     0034                     _init:
   278     0034                     	ds	1
   279     0035                     _nosensor:
   280     0035                     	ds	1
   281                           
   282                           	psect	dataBANK0
   283     0036                     __pdataBANK0:
   284     0036                     _start_delay:
   285     0036                     	ds	2
   286     0038                     _temp:
   287     0038                     	ds	2
   288                           
   289                           	psect	cstackCOMMON
   290     0070                     __pcstackCOMMON:
   291     0070                     ?_init_ds:
   292     0070                     ?_TX:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0070                     ?_show_LED1:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     ?_show_LED2:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     ?_show_LED3:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     ?_main:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0070                     ?_RX:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0070                     ?_convert_to_segment:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0070                     ?___wmul:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0070                     convert_to_segment@value:	
   317                           ; 2 bytes @ 0x0
   318                           
   319     0070                     ___wmul@multiplier:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0070                     ??_init_ds:	
   323                           ; 2 bytes @ 0x0
   324                           
   325     0070                     ??_TX:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ??_RX:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0070                     ??_convert_to_segment:	
   332                           ; 1 bytes @ 0x0
   333                           
   334                           
   335                           ; 1 bytes @ 0x0
   336     0070                     	ds	1
   337     0071                     init_ds@b:
   338     0071                     TX@cmd:	
   339                           ; 1 bytes @ 0x1
   340                           
   341     0071                     RX@d:	
   342                           ; 1 bytes @ 0x1
   343                           
   344     0071                     ??_show_LED1:	
   345                           ; 1 bytes @ 0x1
   346                           
   347     0071                     ??_show_LED2:	
   348                           ; 1 bytes @ 0x1
   349                           
   350     0071                     ??_show_LED3:	
   351                           ; 1 bytes @ 0x1
   352                           
   353                           
   354                           ; 1 bytes @ 0x1
   355     0071                     	ds	1
   356     0072                     TX@temp:
   357     0072                     RX@i:	
   358                           ; 1 bytes @ 0x2
   359                           
   360     0072                     ___wmul@multiplicand:	
   361                           ; 1 bytes @ 0x2
   362                           
   363                           
   364                           ; 2 bytes @ 0x2
   365     0072                     	ds	1
   366     0073                     TX@i:
   367     0073                     show_LED1@c:	
   368                           ; 1 bytes @ 0x3
   369                           
   370     0073                     show_LED2@c:	
   371                           ; 1 bytes @ 0x3
   372                           
   373     0073                     show_LED3@c:	
   374                           ; 1 bytes @ 0x3
   375                           
   376                           
   377                           ; 1 bytes @ 0x3
   378     0073                     	ds	1
   379     0074                     TX@control0:
   380     0074                     ___wmul@product:	
   381                           ; 1 bytes @ 0x4
   382                           
   383     0074                     ??___wmul:	
   384                           ; 2 bytes @ 0x4
   385                           
   386                           
   387                           ; 1 bytes @ 0x4
   388     0074                     	ds	2
   389     0076                     ?___awdiv:
   390     0076                     ___awdiv@divisor:	
   391                           ; 2 bytes @ 0x6
   392                           
   393                           
   394                           ; 2 bytes @ 0x6
   395     0076                     	ds	2
   396     0078                     ___awdiv@dividend:
   397                           
   398                           ; 2 bytes @ 0x8
   399     0078                     	ds	2
   400     007A                     ___awdiv@counter:
   401     007A                     ??___awdiv:	
   402                           ; 1 bytes @ 0xA
   403                           
   404                           
   405                           ; 1 bytes @ 0xA
   406     007A                     	ds	1
   407     007B                     ___awdiv@sign:
   408                           
   409                           ; 1 bytes @ 0xB
   410     007B                     	ds	1
   411     007C                     ___awdiv@quotient:
   412                           
   413                           ; 2 bytes @ 0xC
   414     007C                     	ds	2
   415     007E                     ??_main:
   416                           
   417                           	psect	cstackBANK0
   418     0020                     __pcstackBANK0:	
   419                           ; 1 bytes @ 0xE
   420                           
   421     0020                     ?_draw_to_LED:
   422     0020                     ?_get_temp:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0020                     draw_to_LED@i:	
   426                           ; 2 bytes @ 0x0
   427                           
   428                           
   429                           ; 2 bytes @ 0x0
   430     0020                     	ds	2
   431     0022                     ??_draw_to_LED:
   432     0022                     ??_get_temp:	
   433                           ; 1 bytes @ 0x2
   434                           
   435                           
   436                           ; 1 bytes @ 0x2
   437     0022                     	ds	2
   438     0024                     draw_to_LED@d_143:
   439                           
   440                           ; 2 bytes @ 0x4
   441     0024                     	ds	2
   442     0026                     draw_to_LED@d:
   443                           
   444                           ; 2 bytes @ 0x6
   445     0026                     	ds	6
   446     002C                     get_temp@temperature:
   447                           
   448                           ; 2 bytes @ 0xC
   449     002C                     	ds	2
   450     002E                     get_temp@signloc:
   451                           
   452                           ; 1 bytes @ 0xE
   453     002E                     	ds	1
   454     002F                     get_temp@temp_drob:
   455                           
   456                           ; 1 bytes @ 0xF
   457     002F                     	ds	1
   458     0030                     get_temp@temp1:
   459                           
   460                           ; 1 bytes @ 0x10
   461     0030                     	ds	1
   462     0031                     get_temp@temp2:
   463                           
   464                           ; 1 bytes @ 0x11
   465     0031                     	ds	1
   466                           
   467                           	psect	maintext
   468     0475                     __pmaintext:	
   469 ;;
   470 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   471 ;;
   472 ;; *************** function _main *****************
   473 ;; Defined at:
   474 ;;		line 35 in file "main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : B00/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   488 ;;      Params:         0       0       0       0
   489 ;;      Locals:         0       0       0       0
   490 ;;      Temps:          0       0       0       0
   491 ;;      Totals:         0       0       0       0
   492 ;;Total ram usage:        0 bytes
   493 ;; Hardware stack levels required when called: 3
   494 ;; This function calls:
   495 ;;		_TX
   496 ;;		_draw_to_LED
   497 ;;		_get_temp
   498 ;;		_init_ds
   499 ;;		_show_LED1
   500 ;;		_show_LED2
   501 ;;		_show_LED3
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507     0475                     _main:	
   508                           ;psect for function _main
   509                           
   510     0475                     l1363:	
   511                           ;incstack = 0
   512                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   513                           
   514                           
   515                           ;main.c: 41:     CMCON = 0b111;
   516     0475  3007               	movlw	7
   517     0476  1283               	bcf	3,5	;RP0=0, select bank0
   518     0477  1303               	bcf	3,6	;RP1=0, select bank0
   519     0478  009F               	movwf	31	;volatile
   520                           
   521                           ;main.c: 43:     TRISA = 0b00000001;
   522     0479  3001               	movlw	1
   523     047A  1683               	bsf	3,5	;RP0=1, select bank1
   524     047B  1303               	bcf	3,6	;RP1=0, select bank1
   525     047C  0085               	movwf	5	;volatile
   526     047D                     l1365:
   527                           
   528                           ;main.c: 44:     TRISB = 0b00000000;
   529     047D  0186               	clrf	6	;volatile
   530     047E                     l1367:
   531                           
   532                           ;main.c: 45:     RB0 = 0;
   533     047E  1283               	bcf	3,5	;RP0=0, select bank0
   534     047F  1303               	bcf	3,6	;RP1=0, select bank0
   535     0480  1006               	bcf	6,0	;volatile
   536     0481                     l1369:
   537                           
   538                           ;main.c: 46:     RB1 = 0;
   539     0481  1086               	bcf	6,1	;volatile
   540     0482                     l1371:
   541                           
   542                           ;main.c: 47:     RB2 = 0;
   543     0482  1106               	bcf	6,2	;volatile
   544     0483                     l1373:
   545                           
   546                           ;main.c: 48:     RB3 = 0;
   547     0483  1186               	bcf	6,3	;volatile
   548     0484                     l1375:
   549                           
   550                           ;main.c: 49:     RB4 = 0;
   551     0484  1206               	bcf	6,4	;volatile
   552     0485                     l1377:
   553                           
   554                           ;main.c: 50:     RB5 = 0;
   555     0485  1286               	bcf	6,5	;volatile
   556     0486                     l1379:
   557                           
   558                           ;main.c: 51:     RB6 = 1;
   559     0486  1706               	bsf	6,6	;volatile
   560     0487                     l1381:
   561                           
   562                           ;main.c: 52:     RB7 = 0;
   563     0487  1386               	bcf	6,7	;volatile
   564     0488                     l1383:
   565                           
   566                           ;main.c: 53:     RA4 = 1;
   567     0488  1605               	bsf	5,4	;volatile
   568     0489                     l1385:
   569                           
   570                           ;main.c: 54:     RA6 = 0;
   571     0489  1305               	bcf	5,6	;volatile
   572     048A                     l1387:
   573                           
   574                           ;main.c: 55:     RA7 = 1;
   575     048A  1785               	bsf	5,7	;volatile
   576     048B                     l1389:
   577                           
   578                           ;main.c: 63:         if (counter==0) {
   579     048B  1283               	bcf	3,5	;RP0=0, select bank0
   580     048C  1303               	bcf	3,6	;RP1=0, select bank0
   581     048D  0832               	movf	_counter,w
   582     048E  0433               	iorwf	_counter+1,w
   583     048F  1D03               	btfss	3,2
   584     0490  2C92               	goto	u571
   585     0491  2C93               	goto	u570
   586     0492                     u571:
   587     0492  2CA2               	goto	l1399
   588     0493                     u570:
   589     0493                     l1391:
   590                           
   591                           ;main.c: 64:             init = init_ds() & 0b00000001;
   592     0493  2367               	fcall	_init_ds
   593     0494  1283               	bcf	3,5	;RP0=0, select bank0
   594     0495  1303               	bcf	3,6	;RP1=0, select bank0
   595     0496  00B4               	movwf	_init
   596     0497                     l1393:
   597     0497  3001               	movlw	1
   598     0498  05B4               	andwf	_init,f
   599     0499                     l1395:
   600                           
   601                           ;main.c: 65:             if (!init) {
   602     0499  0834               	movf	_init,w
   603     049A  1D03               	btfss	3,2
   604     049B  2C9D               	goto	u581
   605     049C  2C9E               	goto	u580
   606     049D                     u581:
   607     049D  2CA2               	goto	l1399
   608     049E                     u580:
   609     049E                     l1397:
   610                           
   611                           ;main.c: 66:                 TX(0xCC);
   612     049E  30CC               	movlw	204
   613     049F  23D5               	fcall	_TX
   614                           
   615                           ;main.c: 67:                 TX(0x44);
   616     04A0  3044               	movlw	68
   617     04A1  23D5               	fcall	_TX
   618     04A2                     l1399:
   619                           
   620                           ;main.c: 71:         if (nosensor==1) {
   621     04A2  1283               	bcf	3,5	;RP0=0, select bank0
   622     04A3  1303               	bcf	3,6	;RP1=0, select bank0
   623     04A4  0335               	decf	_nosensor,w
   624     04A5  1D03               	btfss	3,2
   625     04A6  2CA8               	goto	u591
   626     04A7  2CA9               	goto	u590
   627     04A8                     u591:
   628     04A8  2CB0               	goto	l1403
   629     04A9                     u590:
   630     04A9                     l1401:
   631                           
   632                           ;main.c: 72:             show_LED1(18);
   633     04A9  3012               	movlw	18
   634     04AA  232E               	fcall	_show_LED1
   635                           
   636                           ;main.c: 73:             show_LED2(18);
   637     04AB  3012               	movlw	18
   638     04AC  2341               	fcall	_show_LED2
   639                           
   640                           ;main.c: 74:             show_LED3(18);
   641     04AD  3012               	movlw	18
   642     04AE  2354               	fcall	_show_LED3
   643                           
   644                           ;main.c: 75:         } else {
   645     04AF  2CD2               	goto	l1413
   646     04B0                     l1403:
   647                           
   648                           ;main.c: 76:             if (temp==1000) {
   649     04B0  30E8               	movlw	232
   650     04B1  0638               	xorwf	_temp,w
   651     04B2  3003               	movlw	3
   652     04B3  1903               	skipnz
   653     04B4  0639               	xorwf	_temp+1,w
   654     04B5  1D03               	btfss	3,2
   655     04B6  2CB8               	goto	u601
   656     04B7  2CB9               	goto	u600
   657     04B8                     u601:
   658     04B8  2CC0               	goto	l1407
   659     04B9                     u600:
   660     04B9                     l1405:
   661                           
   662                           ;main.c: 77:                 show_LED1(16);
   663     04B9  3010               	movlw	16
   664     04BA  232E               	fcall	_show_LED1
   665                           
   666                           ;main.c: 78:                 show_LED2(17);
   667     04BB  3011               	movlw	17
   668     04BC  2341               	fcall	_show_LED2
   669                           
   670                           ;main.c: 79:                 show_LED3(16);
   671     04BD  3010               	movlw	16
   672     04BE  2354               	fcall	_show_LED3
   673                           
   674                           ;main.c: 80:             } else {
   675     04BF  2CD2               	goto	l1413
   676     04C0                     l1407:
   677                           
   678                           ;main.c: 81:                 if (start_delay==0) {
   679     04C0  0836               	movf	_start_delay,w
   680     04C1  0437               	iorwf	_start_delay+1,w
   681     04C2  1D03               	btfss	3,2
   682     04C3  2CC5               	goto	u611
   683     04C4  2CC6               	goto	u610
   684     04C5                     u611:
   685     04C5  2CCC               	goto	l1411
   686     04C6                     u610:
   687     04C6                     l1409:
   688                           
   689                           ;main.c: 82:                     draw_to_LED(temp);
   690     04C6  0839               	movf	_temp+1,w
   691     04C7  00A1               	movwf	draw_to_LED@i+1
   692     04C8  0838               	movf	_temp,w
   693     04C9  00A0               	movwf	draw_to_LED@i
   694     04CA  26C2               	fcall	_draw_to_LED
   695                           
   696                           ;main.c: 83:                 } else {
   697     04CB  2CD2               	goto	l1413
   698     04CC                     l1411:
   699                           
   700                           ;main.c: 84:                     show_LED1(16);
   701     04CC  3010               	movlw	16
   702     04CD  232E               	fcall	_show_LED1
   703                           
   704                           ;main.c: 85:                     show_LED2(17);
   705     04CE  3011               	movlw	17
   706     04CF  2341               	fcall	_show_LED2
   707                           
   708                           ;main.c: 86:                     show_LED3(16);
   709     04D0  3010               	movlw	16
   710     04D1  2354               	fcall	_show_LED3
   711     04D2                     l1413:
   712                           
   713                           ;main.c: 91:         counter++;
   714     04D2  3001               	movlw	1
   715     04D3  1283               	bcf	3,5	;RP0=0, select bank0
   716     04D4  1303               	bcf	3,6	;RP1=0, select bank0
   717     04D5  07B2               	addwf	_counter,f
   718     04D6  1803               	skipnc
   719     04D7  0AB3               	incf	_counter+1,f
   720     04D8  3000               	movlw	0
   721     04D9  07B3               	addwf	_counter+1,f
   722     04DA                     l1415:
   723                           
   724                           ;main.c: 92:         if (counter > 100) {
   725     04DA  0833               	movf	_counter+1,w
   726     04DB  3A80               	xorlw	128
   727     04DC  00FF               	movwf	btemp+1
   728     04DD  3080               	movlw	128
   729     04DE  027F               	subwf	btemp+1,w
   730     04DF  1D03               	skipz
   731     04E0  2CE3               	goto	u625
   732     04E1  3065               	movlw	101
   733     04E2  0232               	subwf	_counter,w
   734     04E3                     u625:
   735     04E3  1C03               	skipc
   736     04E4  2CE6               	goto	u621
   737     04E5  2CE7               	goto	u620
   738     04E6                     u621:
   739     04E6  2C8B               	goto	l1389
   740     04E7                     u620:
   741     04E7                     l1417:
   742                           
   743                           ;main.c: 93:             if (start_delay > 0) {
   744     04E7  1283               	bcf	3,5	;RP0=0, select bank0
   745     04E8  1303               	bcf	3,6	;RP1=0, select bank0
   746     04E9  0837               	movf	_start_delay+1,w
   747     04EA  3A80               	xorlw	128
   748     04EB  00FF               	movwf	btemp+1
   749     04EC  3080               	movlw	128
   750     04ED  027F               	subwf	btemp+1,w
   751     04EE  1D03               	skipz
   752     04EF  2CF2               	goto	u635
   753     04F0  3001               	movlw	1
   754     04F1  0236               	subwf	_start_delay,w
   755     04F2                     u635:
   756     04F2  1C03               	skipc
   757     04F3  2CF5               	goto	u631
   758     04F4  2CF6               	goto	u630
   759     04F5                     u631:
   760     04F5  2CFE               	goto	l1421
   761     04F6                     u630:
   762     04F6                     l1419:
   763                           
   764                           ;main.c: 94:                 start_delay--;
   765     04F6  30FF               	movlw	255
   766     04F7  1283               	bcf	3,5	;RP0=0, select bank0
   767     04F8  1303               	bcf	3,6	;RP1=0, select bank0
   768     04F9  07B6               	addwf	_start_delay,f
   769     04FA  1803               	skipnc
   770     04FB  0AB7               	incf	_start_delay+1,f
   771     04FC  30FF               	movlw	255
   772     04FD  07B7               	addwf	_start_delay+1,f
   773     04FE                     l1421:
   774                           
   775                           ;main.c: 95:                 temp = get_temp()-14;
   776     04FE  250D               	fcall	_get_temp
   777     04FF  1283               	bcf	3,5	;RP0=0, select bank0
   778     0500  1303               	bcf	3,6	;RP1=0, select bank0
   779     0501  0820               	movf	?_get_temp,w
   780     0502  3EF2               	addlw	242
   781     0503  00B8               	movwf	_temp
   782     0504  0821               	movf	?_get_temp+1,w
   783     0505  1803               	skipnc
   784     0506  3E01               	addlw	1
   785     0507  3EFF               	addlw	255
   786     0508  00B9               	movwf	_temp+1
   787     0509                     l1425:	
   788                           ;main.c: 96:             } else {
   789                           
   790                           
   791                           ;main.c: 99:             counter=0;
   792     0509  01B2               	clrf	_counter
   793     050A  01B3               	clrf	_counter+1
   794     050B  2C8B               	goto	l1389
   795     050C  2800               	ljmp	start
   796     050D                     __end_of_main:
   797                           
   798                           	psect	text1
   799     050D                     __ptext1:	
   800 ;; *************** function _get_temp *****************
   801 ;; Defined at:
   802 ;;		line 64 in file "onewire.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;  temperature     2   12[BANK0 ] int 
   807 ;;  temp2           1   17[BANK0 ] unsigned char 
   808 ;;  temp1           1   16[BANK0 ] unsigned char 
   809 ;;  temp_drob       1   15[BANK0 ] unsigned char 
   810 ;;  signloc         1   14[BANK0 ] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  2    0[BANK0 ] int 
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0, pclath, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   820 ;;      Params:         0       2       0       0
   821 ;;      Locals:         0       6       0       0
   822 ;;      Temps:          0      10       0       0
   823 ;;      Totals:         0      18       0       0
   824 ;;Total ram usage:       18 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; Hardware stack levels required when called: 1
   827 ;; This function calls:
   828 ;;		_RX
   829 ;;		_TX
   830 ;;		___awdiv
   831 ;;		___wmul
   832 ;;		_init_ds
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838     050D                     _get_temp:	
   839                           ;psect for function _get_temp
   840                           
   841     050D                     l1319:	
   842                           ;incstack = 0
   843                           ; Regs used in _get_temp: [wreg+status,2+status,0+pclath+cstack]
   844                           
   845                           
   846                           ;onewire.c: 67:     unsigned char temp2 = 0;
   847     050D  1283               	bcf	3,5	;RP0=0, select bank0
   848     050E  1303               	bcf	3,6	;RP1=0, select bank0
   849     050F  01B1               	clrf	get_temp@temp2
   850     0510                     l1321:
   851                           
   852                           ;onewire.c: 68:     unsigned char temp_drob;;onewire.c: 69:     signed int temperature;;
      +                          onewire.c: 70:     unsigned char signloc;;onewire.c: 84:     init = init_ds() & 0b000000
      +                          01;
   853     0510  2367               	fcall	_init_ds
   854     0511  1283               	bcf	3,5	;RP0=0, select bank0
   855     0512  1303               	bcf	3,6	;RP1=0, select bank0
   856     0513  00B4               	movwf	_init
   857     0514                     l1323:
   858     0514  3001               	movlw	1
   859     0515  05B4               	andwf	_init,f
   860     0516                     l1325:
   861                           
   862                           ;onewire.c: 85:     if (!init) {
   863     0516  0834               	movf	_init,w
   864     0517  1D03               	btfss	3,2
   865     0518  2D1A               	goto	u541
   866     0519  2D1B               	goto	u540
   867     051A                     u541:
   868     051A  2DC4               	goto	l104
   869     051B                     u540:
   870     051B                     l1327:
   871                           
   872                           ;onewire.c: 87:         TX(0xCC);
   873     051B  30CC               	movlw	204
   874     051C  23D5               	fcall	_TX
   875                           
   876                           ;onewire.c: 88:         TX(0xBE);
   877     051D  30BE               	movlw	190
   878     051E  23D5               	fcall	_TX
   879                           
   880                           ;onewire.c: 89:         temp1 = RX();
   881     051F  23AC               	fcall	_RX
   882     0520  1283               	bcf	3,5	;RP0=0, select bank0
   883     0521  1303               	bcf	3,6	;RP1=0, select bank0
   884     0522  00B0               	movwf	get_temp@temp1
   885                           
   886                           ;onewire.c: 90:         temp2 = RX();
   887     0523  23AC               	fcall	_RX
   888     0524  1283               	bcf	3,5	;RP0=0, select bank0
   889     0525  1303               	bcf	3,6	;RP1=0, select bank0
   890     0526  00B1               	movwf	get_temp@temp2
   891     0527                     l1329:
   892                           
   893                           ;onewire.c: 92:         signloc = (temp2 & 0x80) >> 7;
   894     0527  0831               	movf	get_temp@temp2,w
   895     0528  00A2               	movwf	??_get_temp
   896     0529  3007               	movlw	7
   897     052A                     u555:
   898     052A  1003               	clrc
   899     052B  0CA2               	rrf	??_get_temp,f
   900     052C  3EFF               	addlw	-1
   901     052D  1D03               	skipz
   902     052E  2D2A               	goto	u555
   903     052F  0822               	movf	??_get_temp,w
   904     0530  00AE               	movwf	get_temp@signloc
   905     0531                     l1331:
   906     0531  3001               	movlw	1
   907     0532  05AE               	andwf	get_temp@signloc,f
   908     0533                     l1333:
   909                           
   910                           ;onewire.c: 93:         temp_drob = temp1 & 0b00001111;
   911     0533  0830               	movf	get_temp@temp1,w
   912     0534  00AF               	movwf	get_temp@temp_drob
   913     0535                     l1335:
   914     0535  300F               	movlw	15
   915     0536  05AF               	andwf	get_temp@temp_drob,f
   916     0537                     l1337:
   917                           
   918                           ;onewire.c: 95:         temp1 >>= 4;
   919     0537  0EB0               	swapf	get_temp@temp1,f
   920     0538  300F               	movlw	15
   921     0539  05B0               	andwf	get_temp@temp1,f
   922     053A                     l1339:
   923                           
   924                           ;onewire.c: 96:         temp2 <<= 4;
   925     053A  0EB1               	swapf	get_temp@temp2,f
   926     053B  30F0               	movlw	240
   927     053C  05B1               	andwf	get_temp@temp2,f
   928     053D                     l1341:
   929                           
   930                           ;onewire.c: 97:         temp2 &= 0b01110000;
   931     053D  3070               	movlw	112
   932     053E  05B1               	andwf	get_temp@temp2,f
   933     053F                     l1343:
   934                           
   935                           ;onewire.c: 98:         temp2 |= temp1;
   936     053F  0830               	movf	get_temp@temp1,w
   937     0540  04B1               	iorwf	get_temp@temp2,f
   938     0541                     l1345:
   939                           
   940                           ;onewire.c: 99:         nosensor = 0;
   941     0541  01B5               	clrf	_nosensor
   942     0542                     l1347:
   943                           
   944                           ;onewire.c: 101:         if (signloc == 1) {
   945     0542  032E               	decf	get_temp@signloc,w
   946     0543  1D03               	btfss	3,2
   947     0544  2D46               	goto	u561
   948     0545  2D47               	goto	u560
   949     0546                     u561:
   950     0546  2D8E               	goto	l1353
   951     0547                     u560:
   952     0547                     l1349:
   953                           
   954                           ;onewire.c: 102:             return temperature = -((127-temp2)*10 + (10 - temp_drob*10/
      +                          16));
   955     0547  0831               	movf	get_temp@temp2,w
   956     0548  00A2               	movwf	??_get_temp
   957     0549  01A3               	clrf	??_get_temp+1
   958     054A  0822               	movf	??_get_temp,w
   959     054B  00F0               	movwf	___wmul@multiplier
   960     054C  0823               	movf	??_get_temp+1,w
   961     054D  00F1               	movwf	___wmul@multiplier+1
   962     054E  30F6               	movlw	246
   963     054F  00F2               	movwf	___wmul@multiplicand
   964     0550  30FF               	movlw	255
   965     0551  00F3               	movwf	___wmul@multiplicand+1
   966     0552  2387               	fcall	___wmul
   967     0553  0870               	movf	?___wmul,w
   968     0554  1283               	bcf	3,5	;RP0=0, select bank0
   969     0555  1303               	bcf	3,6	;RP1=0, select bank0
   970     0556  00A4               	movwf	??_get_temp+2
   971     0557  0871               	movf	?___wmul+1,w
   972     0558  00A5               	movwf	??_get_temp+3
   973     0559  3010               	movlw	16
   974     055A  00F6               	movwf	___awdiv@divisor
   975     055B  3000               	movlw	0
   976     055C  00F7               	movwf	___awdiv@divisor+1
   977     055D  082F               	movf	get_temp@temp_drob,w
   978     055E  00A6               	movwf	??_get_temp+4
   979     055F  01A7               	clrf	??_get_temp+5
   980     0560  0826               	movf	??_get_temp+4,w
   981     0561  00F0               	movwf	___wmul@multiplier
   982     0562  0827               	movf	??_get_temp+5,w
   983     0563  00F1               	movwf	___wmul@multiplier+1
   984     0564  300A               	movlw	10
   985     0565  00F2               	movwf	___wmul@multiplicand
   986     0566  3000               	movlw	0
   987     0567  00F3               	movwf	___wmul@multiplicand+1
   988     0568  2387               	fcall	___wmul
   989     0569  0871               	movf	?___wmul+1,w
   990     056A  00F9               	movwf	___awdiv@dividend+1
   991     056B  0870               	movf	?___wmul,w
   992     056C  00F8               	movwf	___awdiv@dividend
   993     056D  2412               	fcall	___awdiv
   994     056E  0876               	movf	?___awdiv,w
   995     056F  1283               	bcf	3,5	;RP0=0, select bank0
   996     0570  1303               	bcf	3,6	;RP1=0, select bank0
   997     0571  0224               	subwf	??_get_temp+2,w
   998     0572  00A8               	movwf	??_get_temp+6
   999     0573  0877               	movf	?___awdiv+1,w
  1000     0574  1C03               	skipc
  1001     0575  0A77               	incf	?___awdiv+1,w
  1002     0576  0225               	subwf	??_get_temp+3,w
  1003     0577  00A9               	movwf	??_get_temp+7
  1004     0578  0828               	movf	??_get_temp+6,w
  1005     0579  3E00               	addlw	0
  1006     057A  00AA               	movwf	??_get_temp+8
  1007     057B  0829               	movf	??_get_temp+7,w
  1008     057C  1803               	skipnc
  1009     057D  3E01               	addlw	1
  1010     057E  3E05               	addlw	5
  1011     057F  00AB               	movwf	??_get_temp+9
  1012     0580  09AA               	comf	??_get_temp+8,f
  1013     0581  09AB               	comf	??_get_temp+9,f
  1014     0582  0AAA               	incf	??_get_temp+8,f
  1015     0583  1903               	skipnz
  1016     0584  0AAB               	incf	??_get_temp+9,f
  1017     0585  082A               	movf	??_get_temp+8,w
  1018     0586  00AC               	movwf	get_temp@temperature
  1019     0587  082B               	movf	??_get_temp+9,w
  1020     0588  00AD               	movwf	get_temp@temperature+1
  1021     0589  082D               	movf	get_temp@temperature+1,w
  1022     058A  00A1               	movwf	?_get_temp+1
  1023     058B  082C               	movf	get_temp@temperature,w
  1024     058C  00A0               	movwf	?_get_temp
  1025     058D  2DC8               	goto	l106
  1026     058E                     l1353:
  1027                           
  1028                           ;onewire.c: 104:         return temperature = temp2*10 + temp_drob*10/16;
  1029     058E  0831               	movf	get_temp@temp2,w
  1030     058F  00A2               	movwf	??_get_temp
  1031     0590  01A3               	clrf	??_get_temp+1
  1032     0591  0822               	movf	??_get_temp,w
  1033     0592  00F0               	movwf	___wmul@multiplier
  1034     0593  0823               	movf	??_get_temp+1,w
  1035     0594  00F1               	movwf	___wmul@multiplier+1
  1036     0595  300A               	movlw	10
  1037     0596  00F2               	movwf	___wmul@multiplicand
  1038     0597  3000               	movlw	0
  1039     0598  00F3               	movwf	___wmul@multiplicand+1
  1040     0599  2387               	fcall	___wmul
  1041     059A  0870               	movf	?___wmul,w
  1042     059B  1283               	bcf	3,5	;RP0=0, select bank0
  1043     059C  1303               	bcf	3,6	;RP1=0, select bank0
  1044     059D  00A4               	movwf	??_get_temp+2
  1045     059E  0871               	movf	?___wmul+1,w
  1046     059F  00A5               	movwf	??_get_temp+3
  1047     05A0  3010               	movlw	16
  1048     05A1  00F6               	movwf	___awdiv@divisor
  1049     05A2  3000               	movlw	0
  1050     05A3  00F7               	movwf	___awdiv@divisor+1
  1051     05A4  082F               	movf	get_temp@temp_drob,w
  1052     05A5  00A6               	movwf	??_get_temp+4
  1053     05A6  01A7               	clrf	??_get_temp+5
  1054     05A7  0826               	movf	??_get_temp+4,w
  1055     05A8  00F0               	movwf	___wmul@multiplier
  1056     05A9  0827               	movf	??_get_temp+5,w
  1057     05AA  00F1               	movwf	___wmul@multiplier+1
  1058     05AB  300A               	movlw	10
  1059     05AC  00F2               	movwf	___wmul@multiplicand
  1060     05AD  3000               	movlw	0
  1061     05AE  00F3               	movwf	___wmul@multiplicand+1
  1062     05AF  2387               	fcall	___wmul
  1063     05B0  0871               	movf	?___wmul+1,w
  1064     05B1  00F9               	movwf	___awdiv@dividend+1
  1065     05B2  0870               	movf	?___wmul,w
  1066     05B3  00F8               	movwf	___awdiv@dividend
  1067     05B4  2412               	fcall	___awdiv
  1068     05B5  0876               	movf	?___awdiv,w
  1069     05B6  1283               	bcf	3,5	;RP0=0, select bank0
  1070     05B7  1303               	bcf	3,6	;RP1=0, select bank0
  1071     05B8  0724               	addwf	??_get_temp+2,w
  1072     05B9  00AC               	movwf	get_temp@temperature
  1073     05BA  0877               	movf	?___awdiv+1,w
  1074     05BB  1803               	skipnc
  1075     05BC  0A77               	incf	?___awdiv+1,w
  1076     05BD  0725               	addwf	??_get_temp+3,w
  1077     05BE  00AD               	movwf	get_temp@temperature+1
  1078     05BF  082D               	movf	get_temp@temperature+1,w
  1079     05C0  00A1               	movwf	?_get_temp+1
  1080     05C1  082C               	movf	get_temp@temperature,w
  1081     05C2  00A0               	movwf	?_get_temp
  1082     05C3  2DC8               	goto	l106
  1083     05C4                     l104:
  1084                           
  1085                           ;onewire.c: 106:         nosensor = 1;
  1086     05C4  3001               	movlw	1
  1087     05C5  00B5               	movwf	_nosensor
  1088     05C6                     l1359:
  1089                           
  1090                           ;onewire.c: 107:         return 0;
  1091     05C6  01A0               	clrf	?_get_temp
  1092     05C7  01A1               	clrf	?_get_temp+1
  1093     05C8                     l106:
  1094     05C8  0008               	return
  1095     05C9                     __end_of_get_temp:
  1096                           
  1097                           	psect	text2
  1098     0367                     __ptext2:	
  1099 ;; *************** function _init_ds *****************
  1100 ;; Defined at:
  1101 ;;		line 10 in file "onewire.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  control0        1    0        unsigned char 
  1106 ;;  b               1    1[COMMON] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      unsigned char 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1116 ;;      Params:         0       0       0       0
  1117 ;;      Locals:         1       0       0       0
  1118 ;;      Temps:          1       0       0       0
  1119 ;;      Totals:         2       0       0       0
  1120 ;;Total ram usage:        2 bytes
  1121 ;; Hardware stack levels used: 1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;;		_get_temp
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130     0367                     _init_ds:	
  1131                           ;psect for function _init_ds
  1132                           
  1133     0367                     l1113:	
  1134                           ;incstack = 0
  1135                           ; Regs used in _init_ds: [wreg+status,2+status,0]
  1136                           
  1137     0367                     l1115:
  1138                           
  1139                           ;onewire.c: 14:     TRISA &= control0;
  1140     0367  30FE               	movlw	254
  1141     0368  1683               	bsf	3,5	;RP0=1, select bank1
  1142     0369  1303               	bcf	3,6	;RP1=0, select bank1
  1143     036A  0585               	andwf	5,f	;volatile
  1144                           
  1145                           ;onewire.c: 15:     PORTA &= control0;
  1146     036B  30FE               	movlw	254
  1147     036C  1283               	bcf	3,5	;RP0=0, select bank0
  1148     036D  1303               	bcf	3,6	;RP1=0, select bank0
  1149     036E  0585               	andwf	5,f	;volatile
  1150     036F                     l1117:
  1151                           
  1152                           ;onewire.c: 16:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  1153     036F  30A6               	movlw	166
  1154     0370  00F0               	movwf	??_init_ds
  1155     0371                     u657:
  1156     0371  0BF0               	decfsz	??_init_ds,f
  1157     0372  2B71               	goto	u657
  1158     0373  0000               	nop
  1159     0374                     l1119:
  1160                           
  1161                           ;onewire.c: 17:     TRISA |= ~control0;
  1162     0374  1683               	bsf	3,5	;RP0=1, select bank1
  1163     0375  1303               	bcf	3,6	;RP1=0, select bank1
  1164     0376  1405               	bsf	5,0	;volatile
  1165                           
  1166                           ;onewire.c: 18:     _delay((unsigned long)((65)*(4000000/4000000.0)));
  1167     0377  3015               	movlw	21
  1168     0378  00F0               	movwf	??_init_ds
  1169     0379                     u667:
  1170     0379  0BF0               	decfsz	??_init_ds,f
  1171     037A  2B79               	goto	u667
  1172     037B  0000               	nop
  1173                           
  1174                           ;onewire.c: 19:     b = PORTA;
  1175     037C  1283               	bcf	3,5	;RP0=0, select bank0
  1176     037D  1303               	bcf	3,6	;RP1=0, select bank0
  1177     037E  0805               	movf	5,w	;volatile
  1178     037F  00F1               	movwf	init_ds@b
  1179                           
  1180                           ;onewire.c: 20:     _delay((unsigned long)((450)*(4000000/4000000.0)));
  1181     0380  3095               	movlw	149
  1182     0381  00F0               	movwf	??_init_ds
  1183     0382                     u677:
  1184     0382  0BF0               	decfsz	??_init_ds,f
  1185     0383  2B82               	goto	u677
  1186     0384  2B85               	nop2
  1187                           
  1188                           ;onewire.c: 21:     return b;
  1189     0385  0871               	movf	init_ds@b,w
  1190     0386                     l88:
  1191     0386  0008               	return
  1192     0387                     __end_of_init_ds:
  1193                           
  1194                           	psect	text3
  1195     03D5                     __ptext3:	
  1196 ;; *************** function _TX *****************
  1197 ;; Defined at:
  1198 ;;		line 24 in file "onewire.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  cmd             1    wreg     unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  cmd             1    1[COMMON] unsigned char 
  1203 ;;  control0        1    4[COMMON] unsigned char 
  1204 ;;  i               1    3[COMMON] unsigned char 
  1205 ;;  temp            1    2[COMMON] unsigned char 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, status,2, status,0
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1215 ;;      Params:         0       0       0       0
  1216 ;;      Locals:         4       0       0       0
  1217 ;;      Temps:          1       0       0       0
  1218 ;;      Totals:         5       0       0       0
  1219 ;;Total ram usage:        5 bytes
  1220 ;; Hardware stack levels used: 1
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;;		_get_temp
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229     03D5                     _TX:	
  1230                           ;psect for function _TX
  1231                           
  1232                           
  1233                           ;incstack = 0
  1234                           ; Regs used in _TX: [wreg+status,2+status,0]
  1235                           ;TX@cmd stored from wreg
  1236     03D5  00F1               	movwf	TX@cmd
  1237     03D6                     l1123:
  1238                           
  1239                           ;onewire.c: 26:     unsigned char i = 0;
  1240     03D6  01F3               	clrf	TX@i
  1241     03D7                     l1125:
  1242                           
  1243                           ;onewire.c: 27:     unsigned char control0 = 0b11111110;
  1244     03D7  30FE               	movlw	254
  1245     03D8  00F4               	movwf	TX@control0
  1246     03D9                     l1127:
  1247                           
  1248                           ;onewire.c: 28:     temp = cmd;
  1249     03D9  0871               	movf	TX@cmd,w
  1250     03DA  00F2               	movwf	TX@temp
  1251     03DB                     l1129:
  1252                           
  1253                           ;onewire.c: 29:     for (i=0;i<8;i++) {
  1254     03DB  01F3               	clrf	TX@i
  1255     03DC                     l91:
  1256                           
  1257                           ;onewire.c: 30:         if (temp&0x01) {
  1258     03DC  1C72               	btfss	TX@temp,0
  1259     03DD  2BDF               	goto	u331
  1260     03DE  2BE0               	goto	u330
  1261     03DF                     u331:
  1262     03DF  2BF4               	goto	l1139
  1263     03E0                     u330:
  1264     03E0                     l1133:
  1265                           
  1266                           ;onewire.c: 31:             TRISA &= control0;
  1267     03E0  0874               	movf	TX@control0,w	;volatile
  1268     03E1  1683               	bsf	3,5	;RP0=1, select bank1
  1269     03E2  1303               	bcf	3,6	;RP1=0, select bank1
  1270     03E3  0585               	andwf	5,f	;volatile
  1271                           
  1272                           ;onewire.c: 32:             PORTA &= control0;
  1273     03E4  0874               	movf	TX@control0,w	;volatile
  1274     03E5  1283               	bcf	3,5	;RP0=0, select bank0
  1275     03E6  1303               	bcf	3,6	;RP1=0, select bank0
  1276     03E7  0585               	andwf	5,f	;volatile
  1277     03E8                     l1135:
  1278                           
  1279                           ;onewire.c: 33:             _delay((unsigned long)((5)*(4000000/4000000.0)));
  1280     03E8  2BE9               	nop2	;2 cycle nop
  1281     03E9  2BEA               	nop2	;2 cycle nop
  1282     03EA  0000               	nop
  1283                           
  1284                           ;onewire.c: 34:             TRISA |= ~control0;
  1285     03EB  0974               	comf	TX@control0,w	;volatile
  1286     03EC  1683               	bsf	3,5	;RP0=1, select bank1
  1287     03ED  1303               	bcf	3,6	;RP1=0, select bank1
  1288     03EE  0485               	iorwf	5,f	;volatile
  1289     03EF                     l1137:
  1290                           
  1291                           ;onewire.c: 35:             _delay((unsigned long)((70)*(4000000/4000000.0)));
  1292     03EF  3017               	movlw	23
  1293     03F0  00F0               	movwf	??_TX
  1294     03F1                     u687:
  1295     03F1  0BF0               	decfsz	??_TX,f
  1296     03F2  2BF1               	goto	u687
  1297                           
  1298                           ;onewire.c: 36:         } else {
  1299     03F3  2C07               	goto	l94
  1300     03F4                     l1139:
  1301                           
  1302                           ;onewire.c: 37:             TRISA &= control0;
  1303     03F4  0874               	movf	TX@control0,w	;volatile
  1304     03F5  1683               	bsf	3,5	;RP0=1, select bank1
  1305     03F6  1303               	bcf	3,6	;RP1=0, select bank1
  1306     03F7  0585               	andwf	5,f	;volatile
  1307                           
  1308                           ;onewire.c: 38:             PORTA &= control0;
  1309     03F8  0874               	movf	TX@control0,w	;volatile
  1310     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1311     03FA  1303               	bcf	3,6	;RP1=0, select bank0
  1312     03FB  0585               	andwf	5,f	;volatile
  1313     03FC                     l1141:
  1314                           
  1315                           ;onewire.c: 39:             _delay((unsigned long)((70)*(4000000/4000000.0)));
  1316     03FC  3017               	movlw	23
  1317     03FD  00F0               	movwf	??_TX
  1318     03FE                     u697:
  1319     03FE  0BF0               	decfsz	??_TX,f
  1320     03FF  2BFE               	goto	u697
  1321     0400                     l1143:
  1322                           
  1323                           ;onewire.c: 40:             TRISA |= ~control0;
  1324     0400  0974               	comf	TX@control0,w	;volatile
  1325     0401  1683               	bsf	3,5	;RP0=1, select bank1
  1326     0402  1303               	bcf	3,6	;RP1=0, select bank1
  1327     0403  0485               	iorwf	5,f	;volatile
  1328     0404                     l1145:
  1329                           
  1330                           ;onewire.c: 41:             _delay((unsigned long)((5)*(4000000/4000000.0)));
  1331     0404  2C05               	nop2	;2 cycle nop
  1332     0405  2C06               	nop2	;2 cycle nop
  1333     0406  0000               	nop
  1334     0407                     l94:	
  1335                           ;onewire.c: 43:         }
  1336                           
  1337                           
  1338                           ;onewire.c: 44:         temp >>= 1;
  1339     0407  1003               	clrc
  1340     0408  0CF2               	rrf	TX@temp,f
  1341     0409                     l1147:
  1342                           
  1343                           ;onewire.c: 45:     }
  1344     0409  3001               	movlw	1
  1345     040A  07F3               	addwf	TX@i,f
  1346     040B                     l1149:
  1347     040B  3008               	movlw	8
  1348     040C  0273               	subwf	TX@i,w
  1349     040D  1C03               	skipc
  1350     040E  2C10               	goto	u341
  1351     040F  2C11               	goto	u340
  1352     0410                     u341:
  1353     0410  2BDC               	goto	l91
  1354     0411                     u340:
  1355     0411                     l95:
  1356     0411  0008               	return
  1357     0412                     __end_of_TX:
  1358                           
  1359                           	psect	text4
  1360     03AC                     __ptext4:	
  1361 ;; *************** function _RX *****************
  1362 ;; Defined at:
  1363 ;;		line 48 in file "onewire.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  i               1    2[COMMON] unsigned char 
  1368 ;;  d               1    1[COMMON] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      unsigned char 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1378 ;;      Params:         0       0       0       0
  1379 ;;      Locals:         2       0       0       0
  1380 ;;      Temps:          1       0       0       0
  1381 ;;      Totals:         3       0       0       0
  1382 ;;Total ram usage:        3 bytes
  1383 ;; Hardware stack levels used: 1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_get_temp
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391     03AC                     _RX:	
  1392                           ;psect for function _RX
  1393                           
  1394     03AC                     l1175:	
  1395                           ;incstack = 0
  1396                           ; Regs used in _RX: [wreg+status,2+status,0]
  1397                           
  1398                           
  1399                           ;onewire.c: 49:     unsigned char d = 0;
  1400     03AC  01F1               	clrf	RX@d
  1401                           
  1402                           ;onewire.c: 50:     unsigned char i = 0;
  1403     03AD  01F2               	clrf	RX@i
  1404                           
  1405                           ;onewire.c: 51:     for (i=0;i<8;i++){
  1406     03AE  01F2               	clrf	RX@i
  1407     03AF                     l98:
  1408                           
  1409                           ;onewire.c: 52:         TRISA0 = 0;
  1410     03AF  1683               	bsf	3,5	;RP0=1, select bank1
  1411     03B0  1303               	bcf	3,6	;RP1=0, select bank1
  1412     03B1  1005               	bcf	5,0	;volatile
  1413                           
  1414                           ;onewire.c: 53:         RA0 = 0;
  1415     03B2  1283               	bcf	3,5	;RP0=0, select bank0
  1416     03B3  1303               	bcf	3,6	;RP1=0, select bank0
  1417     03B4  1005               	bcf	5,0	;volatile
  1418                           
  1419                           ;onewire.c: 54:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  1420     03B5  2BB6               	nop2	;2 cycle nop
  1421     03B6  2BB7               	nop2	;2 cycle nop
  1422     03B7  0000               	nop
  1423                           
  1424                           ;onewire.c: 55:         TRISA0 = 1;
  1425     03B8  1683               	bsf	3,5	;RP0=1, select bank1
  1426     03B9  1303               	bcf	3,6	;RP1=0, select bank1
  1427     03BA  1405               	bsf	5,0	;volatile
  1428                           
  1429                           ;onewire.c: 56:         _delay((unsigned long)((4)*(4000000/4000000.0)));
  1430     03BB  2BBC               	nop2	;2 cycle nop
  1431     03BC  2BBD               	nop2	;2 cycle nop
  1432     03BD                     l1181:
  1433                           
  1434                           ;onewire.c: 57:         d>>=1;
  1435     03BD  1003               	clrc
  1436     03BE  0CF1               	rrf	RX@d,f
  1437     03BF                     l1183:
  1438                           
  1439                           ;onewire.c: 58:         if (RA0 == 1) d |= 0x80;
  1440     03BF  1283               	bcf	3,5	;RP0=0, select bank0
  1441     03C0  1303               	bcf	3,6	;RP1=0, select bank0
  1442     03C1  1C05               	btfss	5,0	;volatile
  1443     03C2  2BC4               	goto	u351
  1444     03C3  2BC5               	goto	u350
  1445     03C4                     u351:
  1446     03C4  2BC6               	goto	l1187
  1447     03C5                     u350:
  1448     03C5                     l1185:
  1449     03C5  17F1               	bsf	RX@d,7
  1450     03C6                     l1187:
  1451                           
  1452                           ;onewire.c: 59:         _delay((unsigned long)((60)*(4000000/4000000.0)));
  1453     03C6  3013               	movlw	19
  1454     03C7  00F0               	movwf	??_RX
  1455     03C8                     u707:
  1456     03C8  0BF0               	decfsz	??_RX,f
  1457     03C9  2BC8               	goto	u707
  1458     03CA  2BCB               	nop2
  1459     03CB                     l1189:
  1460                           
  1461                           ;onewire.c: 60:     };
  1462     03CB  3001               	movlw	1
  1463     03CC  07F2               	addwf	RX@i,f
  1464     03CD                     l1191:
  1465     03CD  3008               	movlw	8
  1466     03CE  0272               	subwf	RX@i,w
  1467     03CF  1C03               	skipc
  1468     03D0  2BD2               	goto	u361
  1469     03D1  2BD3               	goto	u360
  1470     03D2                     u361:
  1471     03D2  2BAF               	goto	l98
  1472     03D3                     u360:
  1473     03D3                     l1193:
  1474                           
  1475                           ;onewire.c: 61:     return d;
  1476     03D3  0871               	movf	RX@d,w
  1477     03D4                     l101:
  1478     03D4  0008               	return
  1479     03D5                     __end_of_RX:
  1480                           
  1481                           	psect	text5
  1482     06C2                     __ptext5:	
  1483 ;; *************** function _draw_to_LED *****************
  1484 ;; Defined at:
  1485 ;;		line 245 in file "7-segment-x-3.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  i               2    0[BANK0 ] int 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  d               2    4[BANK0 ] int 
  1490 ;;  d               2    6[BANK0 ] int 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1500 ;;      Params:         0       2       0       0
  1501 ;;      Locals:         0       4       0       0
  1502 ;;      Temps:          0       2       0       0
  1503 ;;      Totals:         0       8       0       0
  1504 ;;Total ram usage:        8 bytes
  1505 ;; Hardware stack levels used: 1
  1506 ;; Hardware stack levels required when called: 2
  1507 ;; This function calls:
  1508 ;;		___awdiv
  1509 ;;		___wmul
  1510 ;;		_show_LED1
  1511 ;;		_show_LED2
  1512 ;;		_show_LED3
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518     06C2                     _draw_to_LED:	
  1519                           ;psect for function _draw_to_LED
  1520                           
  1521     06C2                     l1255:	
  1522                           ;incstack = 0
  1523                           ; Regs used in _draw_to_LED: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1524                           
  1525     06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1526     06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1527     06C4  1BA1               	btfsc	draw_to_LED@i+1,7
  1528     06C5  2EC7               	goto	u511
  1529     06C6  2EC8               	goto	u510
  1530     06C7                     u511:
  1531     06C7  2F3D               	goto	l1275
  1532     06C8                     u510:
  1533     06C8                     l1257:
  1534     06C8  3064               	movlw	100
  1535     06C9  00F6               	movwf	___awdiv@divisor
  1536     06CA  3000               	movlw	0
  1537     06CB  00F7               	movwf	___awdiv@divisor+1
  1538     06CC  0821               	movf	draw_to_LED@i+1,w
  1539     06CD  00F9               	movwf	___awdiv@dividend+1
  1540     06CE  0820               	movf	draw_to_LED@i,w
  1541     06CF  00F8               	movwf	___awdiv@dividend
  1542     06D0  2412               	fcall	___awdiv
  1543     06D1  0877               	movf	?___awdiv+1,w
  1544     06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1545     06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1546     06D4  00A5               	movwf	draw_to_LED@d_143+1
  1547     06D5  0876               	movf	?___awdiv,w
  1548     06D6  00A4               	movwf	draw_to_LED@d_143
  1549     06D7                     l1259:
  1550     06D7  0825               	movf	draw_to_LED@d_143+1,w
  1551     06D8  3A80               	xorlw	128
  1552     06D9  00FF               	movwf	btemp+1
  1553     06DA  3080               	movlw	128
  1554     06DB  027F               	subwf	btemp+1,w
  1555     06DC  1D03               	skipz
  1556     06DD  2EE0               	goto	u525
  1557     06DE  3001               	movlw	1
  1558     06DF  0224               	subwf	draw_to_LED@d_143,w
  1559     06E0                     u525:
  1560     06E0  1C03               	skipc
  1561     06E1  2EE3               	goto	u521
  1562     06E2  2EE4               	goto	u520
  1563     06E3                     u521:
  1564     06E3  2EE9               	goto	l1263
  1565     06E4                     u520:
  1566     06E4                     l1261:
  1567     06E4  1283               	bcf	3,5	;RP0=0, select bank0
  1568     06E5  1303               	bcf	3,6	;RP1=0, select bank0
  1569     06E6  0824               	movf	draw_to_LED@d_143,w
  1570     06E7  232E               	fcall	_show_LED1
  1571     06E8  2EEB               	goto	l1265
  1572     06E9                     l1263:
  1573     06E9  3010               	movlw	16
  1574     06EA  232E               	fcall	_show_LED1
  1575     06EB                     l1265:
  1576     06EB  300A               	movlw	10
  1577     06EC  00F6               	movwf	___awdiv@divisor
  1578     06ED  3000               	movlw	0
  1579     06EE  00F7               	movwf	___awdiv@divisor+1
  1580     06EF  1283               	bcf	3,5	;RP0=0, select bank0
  1581     06F0  1303               	bcf	3,6	;RP1=0, select bank0
  1582     06F1  0821               	movf	draw_to_LED@i+1,w
  1583     06F2  00F9               	movwf	___awdiv@dividend+1
  1584     06F3  0820               	movf	draw_to_LED@i,w
  1585     06F4  00F8               	movwf	___awdiv@dividend
  1586     06F5  2412               	fcall	___awdiv
  1587     06F6  0876               	movf	?___awdiv,w
  1588     06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1589     06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1590     06F9  00A2               	movwf	??_draw_to_LED
  1591     06FA  0877               	movf	?___awdiv+1,w
  1592     06FB  00A3               	movwf	??_draw_to_LED+1
  1593     06FC  3064               	movlw	100
  1594     06FD  00F6               	movwf	___awdiv@divisor
  1595     06FE  3000               	movlw	0
  1596     06FF  00F7               	movwf	___awdiv@divisor+1
  1597     0700  0821               	movf	draw_to_LED@i+1,w
  1598     0701  00F9               	movwf	___awdiv@dividend+1
  1599     0702  0820               	movf	draw_to_LED@i,w
  1600     0703  00F8               	movwf	___awdiv@dividend
  1601     0704  2412               	fcall	___awdiv
  1602     0705  0877               	movf	?___awdiv+1,w
  1603     0706  00F1               	movwf	___wmul@multiplier+1
  1604     0707  0876               	movf	?___awdiv,w
  1605     0708  00F0               	movwf	___wmul@multiplier
  1606     0709  30F6               	movlw	246
  1607     070A  00F2               	movwf	___wmul@multiplicand
  1608     070B  30FF               	movlw	255
  1609     070C  00F3               	movwf	___wmul@multiplicand+1
  1610     070D  2387               	fcall	___wmul
  1611     070E  0870               	movf	?___wmul,w
  1612     070F  1283               	bcf	3,5	;RP0=0, select bank0
  1613     0710  1303               	bcf	3,6	;RP1=0, select bank0
  1614     0711  0722               	addwf	??_draw_to_LED,w
  1615     0712  00A4               	movwf	draw_to_LED@d_143
  1616     0713  0871               	movf	?___wmul+1,w
  1617     0714  1803               	skipnc
  1618     0715  0A71               	incf	?___wmul+1,w
  1619     0716  0723               	addwf	??_draw_to_LED+1,w
  1620     0717  00A5               	movwf	draw_to_LED@d_143+1
  1621     0718                     l1267:
  1622     0718  1786               	bsf	6,7	;volatile
  1623     0719                     l1269:
  1624     0719  0824               	movf	draw_to_LED@d_143,w
  1625     071A  2341               	fcall	_show_LED2
  1626     071B                     l1271:
  1627     071B  1283               	bcf	3,5	;RP0=0, select bank0
  1628     071C  1303               	bcf	3,6	;RP1=0, select bank0
  1629     071D  1386               	bcf	6,7	;volatile
  1630     071E  300A               	movlw	10
  1631     071F  00F6               	movwf	___awdiv@divisor
  1632     0720  3000               	movlw	0
  1633     0721  00F7               	movwf	___awdiv@divisor+1
  1634     0722  0821               	movf	draw_to_LED@i+1,w
  1635     0723  00F9               	movwf	___awdiv@dividend+1
  1636     0724  0820               	movf	draw_to_LED@i,w
  1637     0725  00F8               	movwf	___awdiv@dividend
  1638     0726  2412               	fcall	___awdiv
  1639     0727  0877               	movf	?___awdiv+1,w
  1640     0728  00F1               	movwf	___wmul@multiplier+1
  1641     0729  0876               	movf	?___awdiv,w
  1642     072A  00F0               	movwf	___wmul@multiplier
  1643     072B  30F6               	movlw	246
  1644     072C  00F2               	movwf	___wmul@multiplicand
  1645     072D  30FF               	movlw	255
  1646     072E  00F3               	movwf	___wmul@multiplicand+1
  1647     072F  2387               	fcall	___wmul
  1648     0730  1283               	bcf	3,5	;RP0=0, select bank0
  1649     0731  1303               	bcf	3,6	;RP1=0, select bank0
  1650     0732  0820               	movf	draw_to_LED@i,w
  1651     0733  0770               	addwf	?___wmul,w
  1652     0734  00A4               	movwf	draw_to_LED@d_143
  1653     0735  0821               	movf	draw_to_LED@i+1,w
  1654     0736  1803               	skipnc
  1655     0737  0A21               	incf	draw_to_LED@i+1,w
  1656     0738  0771               	addwf	?___wmul+1,w
  1657     0739  00A5               	movwf	draw_to_LED@d_143+1
  1658     073A                     l1273:
  1659     073A  0824               	movf	draw_to_LED@d_143,w
  1660     073B  2354               	fcall	_show_LED3
  1661     073C  2FE7               	goto	l1303
  1662     073D                     l1275:
  1663     073D  309C               	movlw	156
  1664     073E  00F6               	movwf	___awdiv@divisor
  1665     073F  30FF               	movlw	255
  1666     0740  00F7               	movwf	___awdiv@divisor+1
  1667     0741  0821               	movf	draw_to_LED@i+1,w
  1668     0742  00F9               	movwf	___awdiv@dividend+1
  1669     0743  0820               	movf	draw_to_LED@i,w
  1670     0744  00F8               	movwf	___awdiv@dividend
  1671     0745  2412               	fcall	___awdiv
  1672     0746  0877               	movf	?___awdiv+1,w
  1673     0747  1283               	bcf	3,5	;RP0=0, select bank0
  1674     0748  1303               	bcf	3,6	;RP1=0, select bank0
  1675     0749  00A7               	movwf	draw_to_LED@d+1
  1676     074A  0876               	movf	?___awdiv,w
  1677     074B  00A6               	movwf	draw_to_LED@d
  1678     074C                     l1277:
  1679     074C  0827               	movf	draw_to_LED@d+1,w
  1680     074D  3A80               	xorlw	128
  1681     074E  00FF               	movwf	btemp+1
  1682     074F  3080               	movlw	128
  1683     0750  027F               	subwf	btemp+1,w
  1684     0751  1D03               	skipz
  1685     0752  2F55               	goto	u535
  1686     0753  3001               	movlw	1
  1687     0754  0226               	subwf	draw_to_LED@d,w
  1688     0755                     u535:
  1689     0755  1C03               	skipc
  1690     0756  2F58               	goto	u531
  1691     0757  2F59               	goto	u530
  1692     0758                     u531:
  1693     0758  2F8F               	goto	l1285
  1694     0759                     u530:
  1695     0759                     l1279:
  1696     0759  3011               	movlw	17
  1697     075A  232E               	fcall	_show_LED1
  1698     075B  1283               	bcf	3,5	;RP0=0, select bank0
  1699     075C  1303               	bcf	3,6	;RP1=0, select bank0
  1700     075D  0826               	movf	draw_to_LED@d,w
  1701     075E  2341               	fcall	_show_LED2
  1702     075F                     l1281:
  1703     075F  3064               	movlw	100
  1704     0760  00F6               	movwf	___awdiv@divisor
  1705     0761  3000               	movlw	0
  1706     0762  00F7               	movwf	___awdiv@divisor+1
  1707     0763  1283               	bcf	3,5	;RP0=0, select bank0
  1708     0764  1303               	bcf	3,6	;RP1=0, select bank0
  1709     0765  0821               	movf	draw_to_LED@i+1,w
  1710     0766  00F9               	movwf	___awdiv@dividend+1
  1711     0767  0820               	movf	draw_to_LED@i,w
  1712     0768  00F8               	movwf	___awdiv@dividend
  1713     0769  2412               	fcall	___awdiv
  1714     076A  0877               	movf	?___awdiv+1,w
  1715     076B  00F1               	movwf	___wmul@multiplier+1
  1716     076C  0876               	movf	?___awdiv,w
  1717     076D  00F0               	movwf	___wmul@multiplier
  1718     076E  300A               	movlw	10
  1719     076F  00F2               	movwf	___wmul@multiplicand
  1720     0770  3000               	movlw	0
  1721     0771  00F3               	movwf	___wmul@multiplicand+1
  1722     0772  2387               	fcall	___wmul
  1723     0773  0870               	movf	?___wmul,w
  1724     0774  1283               	bcf	3,5	;RP0=0, select bank0
  1725     0775  1303               	bcf	3,6	;RP1=0, select bank0
  1726     0776  00A2               	movwf	??_draw_to_LED
  1727     0777  0871               	movf	?___wmul+1,w
  1728     0778  00A3               	movwf	??_draw_to_LED+1
  1729     0779  30F6               	movlw	246
  1730     077A  00F6               	movwf	___awdiv@divisor
  1731     077B  30FF               	movlw	255
  1732     077C  00F7               	movwf	___awdiv@divisor+1
  1733     077D  0821               	movf	draw_to_LED@i+1,w
  1734     077E  00F9               	movwf	___awdiv@dividend+1
  1735     077F  0820               	movf	draw_to_LED@i,w
  1736     0780  00F8               	movwf	___awdiv@dividend
  1737     0781  2412               	fcall	___awdiv
  1738     0782  0876               	movf	?___awdiv,w
  1739     0783  1283               	bcf	3,5	;RP0=0, select bank0
  1740     0784  1303               	bcf	3,6	;RP1=0, select bank0
  1741     0785  0722               	addwf	??_draw_to_LED,w
  1742     0786  00A6               	movwf	draw_to_LED@d
  1743     0787  0877               	movf	?___awdiv+1,w
  1744     0788  1803               	skipnc
  1745     0789  0A77               	incf	?___awdiv+1,w
  1746     078A  0723               	addwf	??_draw_to_LED+1,w
  1747     078B  00A7               	movwf	draw_to_LED@d+1
  1748     078C                     l1283:
  1749     078C  0826               	movf	draw_to_LED@d,w
  1750     078D  2354               	fcall	_show_LED3
  1751     078E  2FE2               	goto	l1297
  1752     078F                     l1285:
  1753     078F  3011               	movlw	17
  1754     0790  232E               	fcall	_show_LED1
  1755     0791                     l1287:
  1756     0791  3064               	movlw	100
  1757     0792  00F6               	movwf	___awdiv@divisor
  1758     0793  3000               	movlw	0
  1759     0794  00F7               	movwf	___awdiv@divisor+1
  1760     0795  1283               	bcf	3,5	;RP0=0, select bank0
  1761     0796  1303               	bcf	3,6	;RP1=0, select bank0
  1762     0797  0821               	movf	draw_to_LED@i+1,w
  1763     0798  00F9               	movwf	___awdiv@dividend+1
  1764     0799  0820               	movf	draw_to_LED@i,w
  1765     079A  00F8               	movwf	___awdiv@dividend
  1766     079B  2412               	fcall	___awdiv
  1767     079C  0877               	movf	?___awdiv+1,w
  1768     079D  00F1               	movwf	___wmul@multiplier+1
  1769     079E  0876               	movf	?___awdiv,w
  1770     079F  00F0               	movwf	___wmul@multiplier
  1771     07A0  300A               	movlw	10
  1772     07A1  00F2               	movwf	___wmul@multiplicand
  1773     07A2  3000               	movlw	0
  1774     07A3  00F3               	movwf	___wmul@multiplicand+1
  1775     07A4  2387               	fcall	___wmul
  1776     07A5  0870               	movf	?___wmul,w
  1777     07A6  1283               	bcf	3,5	;RP0=0, select bank0
  1778     07A7  1303               	bcf	3,6	;RP1=0, select bank0
  1779     07A8  00A2               	movwf	??_draw_to_LED
  1780     07A9  0871               	movf	?___wmul+1,w
  1781     07AA  00A3               	movwf	??_draw_to_LED+1
  1782     07AB  30F6               	movlw	246
  1783     07AC  00F6               	movwf	___awdiv@divisor
  1784     07AD  30FF               	movlw	255
  1785     07AE  00F7               	movwf	___awdiv@divisor+1
  1786     07AF  0821               	movf	draw_to_LED@i+1,w
  1787     07B0  00F9               	movwf	___awdiv@dividend+1
  1788     07B1  0820               	movf	draw_to_LED@i,w
  1789     07B2  00F8               	movwf	___awdiv@dividend
  1790     07B3  2412               	fcall	___awdiv
  1791     07B4  0876               	movf	?___awdiv,w
  1792     07B5  1283               	bcf	3,5	;RP0=0, select bank0
  1793     07B6  1303               	bcf	3,6	;RP1=0, select bank0
  1794     07B7  0722               	addwf	??_draw_to_LED,w
  1795     07B8  00A6               	movwf	draw_to_LED@d
  1796     07B9  0877               	movf	?___awdiv+1,w
  1797     07BA  1803               	skipnc
  1798     07BB  0A77               	incf	?___awdiv+1,w
  1799     07BC  0723               	addwf	??_draw_to_LED+1,w
  1800     07BD  00A7               	movwf	draw_to_LED@d+1
  1801     07BE                     l1289:
  1802     07BE  1786               	bsf	6,7	;volatile
  1803     07BF                     l1291:
  1804     07BF  0826               	movf	draw_to_LED@d,w
  1805     07C0  2341               	fcall	_show_LED2
  1806     07C1                     l1293:
  1807     07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1808     07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1809     07C3  1386               	bcf	6,7	;volatile
  1810     07C4  300A               	movlw	10
  1811     07C5  00F6               	movwf	___awdiv@divisor
  1812     07C6  3000               	movlw	0
  1813     07C7  00F7               	movwf	___awdiv@divisor+1
  1814     07C8  0821               	movf	draw_to_LED@i+1,w
  1815     07C9  00F9               	movwf	___awdiv@dividend+1
  1816     07CA  0820               	movf	draw_to_LED@i,w
  1817     07CB  00F8               	movwf	___awdiv@dividend
  1818     07CC  2412               	fcall	___awdiv
  1819     07CD  0877               	movf	?___awdiv+1,w
  1820     07CE  00F1               	movwf	___wmul@multiplier+1
  1821     07CF  0876               	movf	?___awdiv,w
  1822     07D0  00F0               	movwf	___wmul@multiplier
  1823     07D1  300A               	movlw	10
  1824     07D2  00F2               	movwf	___wmul@multiplicand
  1825     07D3  3000               	movlw	0
  1826     07D4  00F3               	movwf	___wmul@multiplicand+1
  1827     07D5  2387               	fcall	___wmul
  1828     07D6  1283               	bcf	3,5	;RP0=0, select bank0
  1829     07D7  1303               	bcf	3,6	;RP1=0, select bank0
  1830     07D8  0820               	movf	draw_to_LED@i,w
  1831     07D9  0270               	subwf	?___wmul,w
  1832     07DA  00A6               	movwf	draw_to_LED@d
  1833     07DB  0821               	movf	draw_to_LED@i+1,w
  1834     07DC  1C03               	skipc
  1835     07DD  0A21               	incf	draw_to_LED@i+1,w
  1836     07DE  0271               	subwf	?___wmul+1,w
  1837     07DF  00A7               	movwf	draw_to_LED@d+1
  1838     07E0                     l1295:
  1839     07E0  0826               	movf	draw_to_LED@d,w
  1840     07E1  2354               	fcall	_show_LED3
  1841     07E2                     l1297:
  1842     07E2  1283               	bcf	3,5	;RP0=0, select bank0
  1843     07E3  1303               	bcf	3,6	;RP1=0, select bank0
  1844     07E4  1605               	bsf	5,4	;volatile
  1845     07E5                     l1299:
  1846     07E5  1705               	bsf	5,6	;volatile
  1847     07E6                     l1301:
  1848     07E6  1785               	bsf	5,7	;volatile
  1849     07E7                     l1303:
  1850     07E7  1283               	bcf	3,5	;RP0=0, select bank0
  1851     07E8  1303               	bcf	3,6	;RP1=0, select bank0
  1852     07E9  1006               	bcf	6,0	;volatile
  1853     07EA                     l1305:
  1854     07EA  1086               	bcf	6,1	;volatile
  1855     07EB                     l1307:
  1856     07EB  1106               	bcf	6,2	;volatile
  1857     07EC                     l1309:
  1858     07EC  1186               	bcf	6,3	;volatile
  1859     07ED                     l1311:
  1860     07ED  1206               	bcf	6,4	;volatile
  1861     07EE                     l1313:
  1862     07EE  1286               	bcf	6,5	;volatile
  1863     07EF                     l1315:
  1864     07EF  1306               	bcf	6,6	;volatile
  1865     07F0                     l1317:
  1866     07F0  1386               	bcf	6,7	;volatile
  1867     07F1                     l193:
  1868     07F1  0008               	return
  1869     07F2                     __end_of_draw_to_LED:
  1870                           
  1871                           	psect	text6
  1872     0354                     __ptext6:	
  1873 ;; *************** function _show_LED3 *****************
  1874 ;; Defined at:
  1875 ;;		line 194 in file "7-segment-x-3.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  c               1    wreg     unsigned char 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  c               1    3[COMMON] unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1889 ;;      Params:         0       0       0       0
  1890 ;;      Locals:         1       0       0       0
  1891 ;;      Temps:          2       0       0       0
  1892 ;;      Totals:         3       0       0       0
  1893 ;;Total ram usage:        3 bytes
  1894 ;; Hardware stack levels used: 1
  1895 ;; Hardware stack levels required when called: 1
  1896 ;; This function calls:
  1897 ;;		_convert_to_segment
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;;		_draw_to_LED
  1901 ;;		_draw_add
  1902 ;;		_draw_temp
  1903 ;;		_draw_needed_amount
  1904 ;;		_draw_minus
  1905 ;;		_draw_to
  1906 ;;		_draw_hot
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910     0354                     _show_LED3:	
  1911                           ;psect for function _show_LED3
  1912                           
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _show_LED3: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1916                           ;show_LED3@c stored from wreg
  1917     0354  00F3               	movwf	show_LED3@c
  1918     0355                     l1167:
  1919     0355  0873               	movf	show_LED3@c,w
  1920     0356  25C9               	fcall	_convert_to_segment
  1921     0357                     l1169:
  1922     0357  1283               	bcf	3,5	;RP0=0, select bank0
  1923     0358  1303               	bcf	3,6	;RP1=0, select bank0
  1924     0359  1385               	bcf	5,7	;volatile
  1925     035A                     l1171:
  1926     035A  3008               	movlw	8
  1927     035B  00F2               	movwf	??_show_LED3+1
  1928     035C  30C9               	movlw	201
  1929     035D  00F1               	movwf	??_show_LED3
  1930     035E                     u717:
  1931     035E  0BF1               	decfsz	??_show_LED3,f
  1932     035F  2B5E               	goto	u717
  1933     0360  0BF2               	decfsz	??_show_LED3+1,f
  1934     0361  2B5E               	goto	u717
  1935     0362  2B63               	nop2
  1936     0363                     l1173:
  1937     0363  1283               	bcf	3,5	;RP0=0, select bank0
  1938     0364  1303               	bcf	3,6	;RP1=0, select bank0
  1939     0365  1785               	bsf	5,7	;volatile
  1940     0366                     l164:
  1941     0366  0008               	return
  1942     0367                     __end_of_show_LED3:
  1943                           
  1944                           	psect	text7
  1945     0341                     __ptext7:	
  1946 ;; *************** function _show_LED2 *****************
  1947 ;; Defined at:
  1948 ;;		line 187 in file "7-segment-x-3.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;  c               1    wreg     unsigned char 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  c               1    3[COMMON] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1962 ;;      Params:         0       0       0       0
  1963 ;;      Locals:         1       0       0       0
  1964 ;;      Temps:          2       0       0       0
  1965 ;;      Totals:         3       0       0       0
  1966 ;;Total ram usage:        3 bytes
  1967 ;; Hardware stack levels used: 1
  1968 ;; Hardware stack levels required when called: 1
  1969 ;; This function calls:
  1970 ;;		_convert_to_segment
  1971 ;; This function is called by:
  1972 ;;		_main
  1973 ;;		_draw_to_LED
  1974 ;;		_draw_add
  1975 ;;		_draw_temp
  1976 ;;		_draw_needed_amount
  1977 ;;		_draw_minus
  1978 ;;		_draw_to
  1979 ;;		_draw_hot
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983     0341                     _show_LED2:	
  1984                           ;psect for function _show_LED2
  1985                           
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _show_LED2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1989                           ;show_LED2@c stored from wreg
  1990     0341  00F3               	movwf	show_LED2@c
  1991     0342                     l1159:
  1992     0342  0873               	movf	show_LED2@c,w
  1993     0343  25C9               	fcall	_convert_to_segment
  1994     0344                     l1161:
  1995     0344  1283               	bcf	3,5	;RP0=0, select bank0
  1996     0345  1303               	bcf	3,6	;RP1=0, select bank0
  1997     0346  1305               	bcf	5,6	;volatile
  1998     0347                     l1163:
  1999     0347  3008               	movlw	8
  2000     0348  00F2               	movwf	??_show_LED2+1
  2001     0349  30C9               	movlw	201
  2002     034A  00F1               	movwf	??_show_LED2
  2003     034B                     u727:
  2004     034B  0BF1               	decfsz	??_show_LED2,f
  2005     034C  2B4B               	goto	u727
  2006     034D  0BF2               	decfsz	??_show_LED2+1,f
  2007     034E  2B4B               	goto	u727
  2008     034F  2B50               	nop2
  2009     0350                     l1165:
  2010     0350  1283               	bcf	3,5	;RP0=0, select bank0
  2011     0351  1303               	bcf	3,6	;RP1=0, select bank0
  2012     0352  1705               	bsf	5,6	;volatile
  2013     0353                     l161:
  2014     0353  0008               	return
  2015     0354                     __end_of_show_LED2:
  2016                           
  2017                           	psect	text8
  2018     032E                     __ptext8:	
  2019 ;; *************** function _show_LED1 *****************
  2020 ;; Defined at:
  2021 ;;		line 180 in file "7-segment-x-3.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  c               1    wreg     unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  c               1    3[COMMON] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2035 ;;      Params:         0       0       0       0
  2036 ;;      Locals:         1       0       0       0
  2037 ;;      Temps:          2       0       0       0
  2038 ;;      Totals:         3       0       0       0
  2039 ;;Total ram usage:        3 bytes
  2040 ;; Hardware stack levels used: 1
  2041 ;; Hardware stack levels required when called: 1
  2042 ;; This function calls:
  2043 ;;		_convert_to_segment
  2044 ;; This function is called by:
  2045 ;;		_main
  2046 ;;		_draw_to_LED
  2047 ;;		_draw_add
  2048 ;;		_draw_temp
  2049 ;;		_draw_needed_amount
  2050 ;;		_draw_minus
  2051 ;;		_draw_to
  2052 ;;		_draw_hot
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056     032E                     _show_LED1:	
  2057                           ;psect for function _show_LED1
  2058                           
  2059                           
  2060                           ;incstack = 0
  2061                           ; Regs used in _show_LED1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2062                           ;show_LED1@c stored from wreg
  2063     032E  00F3               	movwf	show_LED1@c
  2064     032F                     l1151:
  2065     032F  0873               	movf	show_LED1@c,w
  2066     0330  25C9               	fcall	_convert_to_segment
  2067     0331                     l1153:
  2068     0331  1283               	bcf	3,5	;RP0=0, select bank0
  2069     0332  1303               	bcf	3,6	;RP1=0, select bank0
  2070     0333  1205               	bcf	5,4	;volatile
  2071     0334                     l1155:
  2072     0334  3008               	movlw	8
  2073     0335  00F2               	movwf	??_show_LED1+1
  2074     0336  30C9               	movlw	201
  2075     0337  00F1               	movwf	??_show_LED1
  2076     0338                     u737:
  2077     0338  0BF1               	decfsz	??_show_LED1,f
  2078     0339  2B38               	goto	u737
  2079     033A  0BF2               	decfsz	??_show_LED1+1,f
  2080     033B  2B38               	goto	u737
  2081     033C  2B3D               	nop2
  2082     033D                     l1157:
  2083     033D  1283               	bcf	3,5	;RP0=0, select bank0
  2084     033E  1303               	bcf	3,6	;RP1=0, select bank0
  2085     033F  1605               	bsf	5,4	;volatile
  2086     0340                     l158:
  2087     0340  0008               	return
  2088     0341                     __end_of_show_LED1:
  2089                           
  2090                           	psect	text9
  2091     05C9                     __ptext9:	
  2092 ;; *************** function _convert_to_segment *****************
  2093 ;; Defined at:
  2094 ;;		line 4 in file "7-segment-x-3.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  value           1    wreg     unsigned char 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  value           1    0[COMMON] unsigned char 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2108 ;;      Params:         0       0       0       0
  2109 ;;      Locals:         1       0       0       0
  2110 ;;      Temps:          0       0       0       0
  2111 ;;      Totals:         1       0       0       0
  2112 ;;Total ram usage:        1 bytes
  2113 ;; Hardware stack levels used: 1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_show_LED1
  2118 ;;		_show_LED2
  2119 ;;		_show_LED3
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123     05C9                     _convert_to_segment:	
  2124                           ;psect for function _convert_to_segment
  2125                           
  2126                           
  2127                           ;incstack = 0
  2128                           ; Regs used in _convert_to_segment: [wreg-fsr0h+status,2+status,0]
  2129                           ;convert_to_segment@value stored from wreg
  2130     05C9  00F0               	movwf	convert_to_segment@value
  2131     05CA                     l1107:
  2132     05CA  2E89               	goto	l1111
  2133     05CB                     l135:
  2134     05CB  1283               	bcf	3,5	;RP0=0, select bank0
  2135     05CC  1303               	bcf	3,6	;RP1=0, select bank0
  2136     05CD  1006               	bcf	6,0	;volatile
  2137     05CE  1086               	bcf	6,1	;volatile
  2138     05CF  1106               	bcf	6,2	;volatile
  2139     05D0  1186               	bcf	6,3	;volatile
  2140     05D1  1206               	bcf	6,4	;volatile
  2141     05D2  1286               	bcf	6,5	;volatile
  2142     05D3  1306               	bcf	6,6	;volatile
  2143     05D4  2EC1               	goto	l155
  2144     05D5                     l137:
  2145     05D5  1283               	bcf	3,5	;RP0=0, select bank0
  2146     05D6  1303               	bcf	3,6	;RP1=0, select bank0
  2147     05D7  1006               	bcf	6,0	;volatile
  2148     05D8  1086               	bcf	6,1	;volatile
  2149     05D9  1106               	bcf	6,2	;volatile
  2150     05DA  1186               	bcf	6,3	;volatile
  2151     05DB  1206               	bcf	6,4	;volatile
  2152     05DC  1286               	bcf	6,5	;volatile
  2153     05DD  1706               	bsf	6,6	;volatile
  2154     05DE  2EC1               	goto	l155
  2155     05DF                     l138:
  2156     05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2157     05E0  1303               	bcf	3,6	;RP1=0, select bank0
  2158     05E1  1406               	bsf	6,0	;volatile
  2159     05E2  1486               	bsf	6,1	;volatile
  2160     05E3  1506               	bsf	6,2	;volatile
  2161     05E4  1586               	bsf	6,3	;volatile
  2162     05E5  1606               	bsf	6,4	;volatile
  2163     05E6  1686               	bsf	6,5	;volatile
  2164     05E7  1306               	bcf	6,6	;volatile
  2165     05E8  2EC1               	goto	l155
  2166     05E9                     l139:
  2167     05E9  1283               	bcf	3,5	;RP0=0, select bank0
  2168     05EA  1303               	bcf	3,6	;RP1=0, select bank0
  2169     05EB  1006               	bcf	6,0	;volatile
  2170     05EC  1486               	bsf	6,1	;volatile
  2171     05ED  1506               	bsf	6,2	;volatile
  2172     05EE  1186               	bcf	6,3	;volatile
  2173     05EF  1206               	bcf	6,4	;volatile
  2174     05F0  1286               	bcf	6,5	;volatile
  2175     05F1  1306               	bcf	6,6	;volatile
  2176     05F2  2EC1               	goto	l155
  2177     05F3                     l140:
  2178     05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2179     05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2180     05F5  1406               	bsf	6,0	;volatile
  2181     05F6  1486               	bsf	6,1	;volatile
  2182     05F7  1106               	bcf	6,2	;volatile
  2183     05F8  1586               	bsf	6,3	;volatile
  2184     05F9  1606               	bsf	6,4	;volatile
  2185     05FA  1286               	bcf	6,5	;volatile
  2186     05FB  1706               	bsf	6,6	;volatile
  2187     05FC  2EC1               	goto	l155
  2188     05FD                     l141:
  2189     05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2190     05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2191     05FF  1406               	bsf	6,0	;volatile
  2192     0600  1486               	bsf	6,1	;volatile
  2193     0601  1506               	bsf	6,2	;volatile
  2194     0602  1586               	bsf	6,3	;volatile
  2195     0603  1206               	bcf	6,4	;volatile
  2196     0604  1286               	bcf	6,5	;volatile
  2197     0605  1706               	bsf	6,6	;volatile
  2198     0606  2EC1               	goto	l155
  2199     0607                     l142:
  2200     0607  1283               	bcf	3,5	;RP0=0, select bank0
  2201     0608  1303               	bcf	3,6	;RP1=0, select bank0
  2202     0609  1006               	bcf	6,0	;volatile
  2203     060A  1486               	bsf	6,1	;volatile
  2204     060B  1506               	bsf	6,2	;volatile
  2205     060C  1186               	bcf	6,3	;volatile
  2206     060D  1206               	bcf	6,4	;volatile
  2207     060E  1686               	bsf	6,5	;volatile
  2208     060F  1706               	bsf	6,6	;volatile
  2209     0610  2EC1               	goto	l155
  2210     0611                     l143:
  2211     0611  1283               	bcf	3,5	;RP0=0, select bank0
  2212     0612  1303               	bcf	3,6	;RP1=0, select bank0
  2213     0613  1406               	bsf	6,0	;volatile
  2214     0614  1086               	bcf	6,1	;volatile
  2215     0615  1506               	bsf	6,2	;volatile
  2216     0616  1586               	bsf	6,3	;volatile
  2217     0617  1206               	bcf	6,4	;volatile
  2218     0618  1686               	bsf	6,5	;volatile
  2219     0619  1706               	bsf	6,6	;volatile
  2220     061A  2EC1               	goto	l155
  2221     061B                     l144:
  2222     061B  1283               	bcf	3,5	;RP0=0, select bank0
  2223     061C  1303               	bcf	3,6	;RP1=0, select bank0
  2224     061D  1406               	bsf	6,0	;volatile
  2225     061E  1086               	bcf	6,1	;volatile
  2226     061F  1506               	bsf	6,2	;volatile
  2227     0620  1586               	bsf	6,3	;volatile
  2228     0621  1606               	bsf	6,4	;volatile
  2229     0622  1686               	bsf	6,5	;volatile
  2230     0623  1706               	bsf	6,6	;volatile
  2231     0624  2EC1               	goto	l155
  2232     0625                     l145:
  2233     0625  1283               	bcf	3,5	;RP0=0, select bank0
  2234     0626  1303               	bcf	3,6	;RP1=0, select bank0
  2235     0627  1406               	bsf	6,0	;volatile
  2236     0628  1486               	bsf	6,1	;volatile
  2237     0629  1506               	bsf	6,2	;volatile
  2238     062A  1186               	bcf	6,3	;volatile
  2239     062B  1206               	bcf	6,4	;volatile
  2240     062C  1286               	bcf	6,5	;volatile
  2241     062D  1306               	bcf	6,6	;volatile
  2242     062E  2EC1               	goto	l155
  2243     062F                     l146:
  2244     062F  1283               	bcf	3,5	;RP0=0, select bank0
  2245     0630  1303               	bcf	3,6	;RP1=0, select bank0
  2246     0631  1406               	bsf	6,0	;volatile
  2247     0632  1486               	bsf	6,1	;volatile
  2248     0633  1506               	bsf	6,2	;volatile
  2249     0634  1586               	bsf	6,3	;volatile
  2250     0635  1606               	bsf	6,4	;volatile
  2251     0636  1686               	bsf	6,5	;volatile
  2252     0637  1706               	bsf	6,6	;volatile
  2253     0638  2EC1               	goto	l155
  2254     0639                     l147:
  2255     0639  1283               	bcf	3,5	;RP0=0, select bank0
  2256     063A  1303               	bcf	3,6	;RP1=0, select bank0
  2257     063B  1406               	bsf	6,0	;volatile
  2258     063C  1486               	bsf	6,1	;volatile
  2259     063D  1506               	bsf	6,2	;volatile
  2260     063E  1586               	bsf	6,3	;volatile
  2261     063F  1206               	bcf	6,4	;volatile
  2262     0640  1686               	bsf	6,5	;volatile
  2263     0641  1706               	bsf	6,6	;volatile
  2264     0642  2EC1               	goto	l155
  2265     0643                     l148:
  2266     0643  1283               	bcf	3,5	;RP0=0, select bank0
  2267     0644  1303               	bcf	3,6	;RP1=0, select bank0
  2268     0645  1406               	bsf	6,0	;volatile
  2269     0646  1486               	bsf	6,1	;volatile
  2270     0647  1506               	bsf	6,2	;volatile
  2271     0648  1186               	bcf	6,3	;volatile
  2272     0649  1606               	bsf	6,4	;volatile
  2273     064A  1686               	bsf	6,5	;volatile
  2274     064B  1706               	bsf	6,6	;volatile
  2275     064C  2EC1               	goto	l155
  2276     064D                     l149:
  2277     064D  1283               	bcf	3,5	;RP0=0, select bank0
  2278     064E  1303               	bcf	3,6	;RP1=0, select bank0
  2279     064F  1006               	bcf	6,0	;volatile
  2280     0650  1486               	bsf	6,1	;volatile
  2281     0651  1506               	bsf	6,2	;volatile
  2282     0652  1586               	bsf	6,3	;volatile
  2283     0653  1606               	bsf	6,4	;volatile
  2284     0654  1286               	bcf	6,5	;volatile
  2285     0655  1706               	bsf	6,6	;volatile
  2286     0656  2EC1               	goto	l155
  2287     0657                     l150:
  2288     0657  1283               	bcf	3,5	;RP0=0, select bank0
  2289     0658  1303               	bcf	3,6	;RP1=0, select bank0
  2290     0659  1406               	bsf	6,0	;volatile
  2291     065A  1486               	bsf	6,1	;volatile
  2292     065B  1106               	bcf	6,2	;volatile
  2293     065C  1186               	bcf	6,3	;volatile
  2294     065D  1206               	bcf	6,4	;volatile
  2295     065E  1686               	bsf	6,5	;volatile
  2296     065F  1706               	bsf	6,6	;volatile
  2297     0660  2EC1               	goto	l155
  2298     0661                     l151:
  2299     0661  1283               	bcf	3,5	;RP0=0, select bank0
  2300     0662  1303               	bcf	3,6	;RP1=0, select bank0
  2301     0663  1006               	bcf	6,0	;volatile
  2302     0664  1086               	bcf	6,1	;volatile
  2303     0665  1506               	bsf	6,2	;volatile
  2304     0666  1186               	bcf	6,3	;volatile
  2305     0667  1606               	bsf	6,4	;volatile
  2306     0668  1686               	bsf	6,5	;volatile
  2307     0669  1706               	bsf	6,6	;volatile
  2308     066A  2EC1               	goto	l155
  2309     066B                     l152:
  2310     066B  1283               	bcf	3,5	;RP0=0, select bank0
  2311     066C  1303               	bcf	3,6	;RP1=0, select bank0
  2312     066D  1006               	bcf	6,0	;volatile
  2313     066E  1086               	bcf	6,1	;volatile
  2314     066F  1506               	bsf	6,2	;volatile
  2315     0670  1586               	bsf	6,3	;volatile
  2316     0671  1606               	bsf	6,4	;volatile
  2317     0672  1286               	bcf	6,5	;volatile
  2318     0673  1706               	bsf	6,6	;volatile
  2319     0674  2EC1               	goto	l155
  2320     0675                     l153:
  2321     0675  1283               	bcf	3,5	;RP0=0, select bank0
  2322     0676  1303               	bcf	3,6	;RP1=0, select bank0
  2323     0677  1006               	bcf	6,0	;volatile
  2324     0678  1086               	bcf	6,1	;volatile
  2325     0679  1106               	bcf	6,2	;volatile
  2326     067A  1586               	bsf	6,3	;volatile
  2327     067B  1606               	bsf	6,4	;volatile
  2328     067C  1686               	bsf	6,5	;volatile
  2329     067D  1706               	bsf	6,6	;volatile
  2330     067E  2EC1               	goto	l155
  2331     067F                     l154:
  2332     067F  1283               	bcf	3,5	;RP0=0, select bank0
  2333     0680  1303               	bcf	3,6	;RP1=0, select bank0
  2334     0681  1406               	bsf	6,0	;volatile
  2335     0682  1086               	bcf	6,1	;volatile
  2336     0683  1106               	bcf	6,2	;volatile
  2337     0684  1586               	bsf	6,3	;volatile
  2338     0685  1606               	bsf	6,4	;volatile
  2339     0686  1686               	bsf	6,5	;volatile
  2340     0687  1706               	bsf	6,6	;volatile
  2341     0688  2EC1               	goto	l155
  2342     0689                     l1111:
  2343     0689  0870               	movf	convert_to_segment@value,w
  2344                           
  2345                           ; Switch size 1, requested type "simple"
  2346                           ; Number of cases is 18, Range of values is 0 to 17
  2347                           ; switch strategies available:
  2348                           ; Name         Instructions Cycles
  2349                           ; direct_byte           24     6 (fixed)
  2350                           ; simple_byte           55    28 (average)
  2351                           ; jumptable            260     6 (fixed)
  2352                           ;	Chosen strategy is simple_byte
  2353     068A  3A00               	xorlw	0	; case 0
  2354     068B  1903               	skipnz
  2355     068C  2DDF               	goto	l138
  2356     068D  3A01               	xorlw	1	; case 1
  2357     068E  1903               	skipnz
  2358     068F  2DE9               	goto	l139
  2359     0690  3A03               	xorlw	3	; case 2
  2360     0691  1903               	skipnz
  2361     0692  2DF3               	goto	l140
  2362     0693  3A01               	xorlw	1	; case 3
  2363     0694  1903               	skipnz
  2364     0695  2DFD               	goto	l141
  2365     0696  3A07               	xorlw	7	; case 4
  2366     0697  1903               	skipnz
  2367     0698  2E07               	goto	l142
  2368     0699  3A01               	xorlw	1	; case 5
  2369     069A  1903               	skipnz
  2370     069B  2E11               	goto	l143
  2371     069C  3A03               	xorlw	3	; case 6
  2372     069D  1903               	skipnz
  2373     069E  2E1B               	goto	l144
  2374     069F  3A01               	xorlw	1	; case 7
  2375     06A0  1903               	skipnz
  2376     06A1  2E25               	goto	l145
  2377     06A2  3A0F               	xorlw	15	; case 8
  2378     06A3  1903               	skipnz
  2379     06A4  2E2F               	goto	l146
  2380     06A5  3A01               	xorlw	1	; case 9
  2381     06A6  1903               	skipnz
  2382     06A7  2E39               	goto	l147
  2383     06A8  3A03               	xorlw	3	; case 10
  2384     06A9  1903               	skipnz
  2385     06AA  2E43               	goto	l148
  2386     06AB  3A01               	xorlw	1	; case 11
  2387     06AC  1903               	skipnz
  2388     06AD  2E4D               	goto	l149
  2389     06AE  3A07               	xorlw	7	; case 12
  2390     06AF  1903               	skipnz
  2391     06B0  2E57               	goto	l150
  2392     06B1  3A01               	xorlw	1	; case 13
  2393     06B2  1903               	skipnz
  2394     06B3  2E61               	goto	l151
  2395     06B4  3A03               	xorlw	3	; case 14
  2396     06B5  1903               	skipnz
  2397     06B6  2E6B               	goto	l152
  2398     06B7  3A01               	xorlw	1	; case 15
  2399     06B8  1903               	skipnz
  2400     06B9  2E75               	goto	l153
  2401     06BA  3A1F               	xorlw	31	; case 16
  2402     06BB  1903               	skipnz
  2403     06BC  2DCB               	goto	l135
  2404     06BD  3A01               	xorlw	1	; case 17
  2405     06BE  1903               	skipnz
  2406     06BF  2DD5               	goto	l137
  2407     06C0  2E7F               	goto	l154
  2408     06C1                     l155:
  2409     06C1  0008               	return
  2410     06C2                     __end_of_convert_to_segment:
  2411                           
  2412                           	psect	text10
  2413     0387                     __ptext10:	
  2414 ;; *************** function ___wmul *****************
  2415 ;; Defined at:
  2416 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  multiplier      2    0[COMMON] unsigned int 
  2419 ;;  multiplicand    2    2[COMMON] unsigned int 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  product         2    4[COMMON] unsigned int 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  2    0[COMMON] unsigned int 
  2424 ;; Registers used:
  2425 ;;		wreg, status,2, status,0
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2431 ;;      Params:         4       0       0       0
  2432 ;;      Locals:         2       0       0       0
  2433 ;;      Temps:          0       0       0       0
  2434 ;;      Totals:         6       0       0       0
  2435 ;;Total ram usage:        6 bytes
  2436 ;; Hardware stack levels used: 1
  2437 ;; This function calls:
  2438 ;;		Nothing
  2439 ;; This function is called by:
  2440 ;;		_get_temp
  2441 ;;		_draw_to_LED
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445     0387                     ___wmul:	
  2446                           ;psect for function ___wmul
  2447                           
  2448     0387                     l1197:	
  2449                           ;incstack = 0
  2450                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2451                           
  2452     0387  01F4               	clrf	___wmul@product
  2453     0388  01F5               	clrf	___wmul@product+1
  2454     0389                     l1199:
  2455     0389  1C70               	btfss	___wmul@multiplier,0
  2456     038A  2B8C               	goto	u371
  2457     038B  2B8D               	goto	u370
  2458     038C                     u371:
  2459     038C  2B93               	goto	l285
  2460     038D                     u370:
  2461     038D                     l1201:
  2462     038D  0872               	movf	___wmul@multiplicand,w
  2463     038E  07F4               	addwf	___wmul@product,f
  2464     038F  1803               	skipnc
  2465     0390  0AF5               	incf	___wmul@product+1,f
  2466     0391  0873               	movf	___wmul@multiplicand+1,w
  2467     0392  07F5               	addwf	___wmul@product+1,f
  2468     0393                     l285:
  2469     0393  3001               	movlw	1
  2470     0394                     u385:
  2471     0394  1003               	clrc
  2472     0395  0DF2               	rlf	___wmul@multiplicand,f
  2473     0396  0DF3               	rlf	___wmul@multiplicand+1,f
  2474     0397  3EFF               	addlw	-1
  2475     0398  1D03               	skipz
  2476     0399  2B94               	goto	u385
  2477     039A                     l1203:
  2478     039A  3001               	movlw	1
  2479     039B                     u395:
  2480     039B  1003               	clrc
  2481     039C  0CF1               	rrf	___wmul@multiplier+1,f
  2482     039D  0CF0               	rrf	___wmul@multiplier,f
  2483     039E  3EFF               	addlw	-1
  2484     039F  1D03               	skipz
  2485     03A0  2B9B               	goto	u395
  2486     03A1                     l1205:
  2487     03A1  0870               	movf	___wmul@multiplier,w
  2488     03A2  0471               	iorwf	___wmul@multiplier+1,w
  2489     03A3  1D03               	btfss	3,2
  2490     03A4  2BA6               	goto	u401
  2491     03A5  2BA7               	goto	u400
  2492     03A6                     u401:
  2493     03A6  2B89               	goto	l1199
  2494     03A7                     u400:
  2495     03A7                     l1207:
  2496     03A7  0875               	movf	___wmul@product+1,w
  2497     03A8  00F1               	movwf	?___wmul+1
  2498     03A9  0874               	movf	___wmul@product,w
  2499     03AA  00F0               	movwf	?___wmul
  2500     03AB                     l287:
  2501     03AB  0008               	return
  2502     03AC                     __end_of___wmul:
  2503                           
  2504                           	psect	text11
  2505     0412                     __ptext11:	
  2506 ;; *************** function ___awdiv *****************
  2507 ;; Defined at:
  2508 ;;		line 5 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/awdiv.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  divisor         2    6[COMMON] int 
  2511 ;;  dividend        2    8[COMMON] int 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  quotient        2   12[COMMON] int 
  2514 ;;  sign            1   11[COMMON] unsigned char 
  2515 ;;  counter         1   10[COMMON] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  2    6[COMMON] int 
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2525 ;;      Params:         4       0       0       0
  2526 ;;      Locals:         4       0       0       0
  2527 ;;      Temps:          0       0       0       0
  2528 ;;      Totals:         8       0       0       0
  2529 ;;Total ram usage:        8 bytes
  2530 ;; Hardware stack levels used: 1
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_get_temp
  2535 ;;		_draw_to_LED
  2536 ;;		_draw_temp
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540     0412                     ___awdiv:	
  2541                           ;psect for function ___awdiv
  2542                           
  2543     0412                     l1211:	
  2544                           ;incstack = 0
  2545                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2546                           
  2547     0412  01FB               	clrf	___awdiv@sign
  2548     0413                     l1213:
  2549     0413  1FF7               	btfss	___awdiv@divisor+1,7
  2550     0414  2C16               	goto	u411
  2551     0415  2C17               	goto	u410
  2552     0416                     u411:
  2553     0416  2C1E               	goto	l1219
  2554     0417                     u410:
  2555     0417                     l1215:
  2556     0417  09F6               	comf	___awdiv@divisor,f
  2557     0418  09F7               	comf	___awdiv@divisor+1,f
  2558     0419  0AF6               	incf	___awdiv@divisor,f
  2559     041A  1903               	skipnz
  2560     041B  0AF7               	incf	___awdiv@divisor+1,f
  2561     041C                     l1217:
  2562     041C  3001               	movlw	1
  2563     041D  00FB               	movwf	___awdiv@sign
  2564     041E                     l1219:
  2565     041E  1FF9               	btfss	___awdiv@dividend+1,7
  2566     041F  2C21               	goto	u421
  2567     0420  2C22               	goto	u420
  2568     0421                     u421:
  2569     0421  2C29               	goto	l1225
  2570     0422                     u420:
  2571     0422                     l1221:
  2572     0422  09F8               	comf	___awdiv@dividend,f
  2573     0423  09F9               	comf	___awdiv@dividend+1,f
  2574     0424  0AF8               	incf	___awdiv@dividend,f
  2575     0425  1903               	skipnz
  2576     0426  0AF9               	incf	___awdiv@dividend+1,f
  2577     0427                     l1223:
  2578     0427  3001               	movlw	1
  2579     0428  06FB               	xorwf	___awdiv@sign,f
  2580     0429                     l1225:
  2581     0429  01FC               	clrf	___awdiv@quotient
  2582     042A  01FD               	clrf	___awdiv@quotient+1
  2583     042B                     l1227:
  2584     042B  0876               	movf	___awdiv@divisor,w
  2585     042C  0477               	iorwf	___awdiv@divisor+1,w
  2586     042D  1903               	btfsc	3,2
  2587     042E  2C30               	goto	u431
  2588     042F  2C31               	goto	u430
  2589     0430                     u431:
  2590     0430  2C66               	goto	l1247
  2591     0431                     u430:
  2592     0431                     l1229:
  2593     0431  3001               	movlw	1
  2594     0432  00FA               	movwf	___awdiv@counter
  2595     0433  2C3D               	goto	l1235
  2596     0434                     l1231:
  2597     0434  3001               	movlw	1
  2598     0435                     u445:
  2599     0435  1003               	clrc
  2600     0436  0DF6               	rlf	___awdiv@divisor,f
  2601     0437  0DF7               	rlf	___awdiv@divisor+1,f
  2602     0438  3EFF               	addlw	-1
  2603     0439  1D03               	skipz
  2604     043A  2C35               	goto	u445
  2605     043B                     l1233:
  2606     043B  3001               	movlw	1
  2607     043C  07FA               	addwf	___awdiv@counter,f
  2608     043D                     l1235:
  2609     043D  1FF7               	btfss	___awdiv@divisor+1,7
  2610     043E  2C40               	goto	u451
  2611     043F  2C41               	goto	u450
  2612     0440                     u451:
  2613     0440  2C34               	goto	l1231
  2614     0441                     u450:
  2615     0441                     l1237:
  2616     0441  3001               	movlw	1
  2617     0442                     u465:
  2618     0442  1003               	clrc
  2619     0443  0DFC               	rlf	___awdiv@quotient,f
  2620     0444  0DFD               	rlf	___awdiv@quotient+1,f
  2621     0445  3EFF               	addlw	-1
  2622     0446  1D03               	skipz
  2623     0447  2C42               	goto	u465
  2624     0448  0877               	movf	___awdiv@divisor+1,w
  2625     0449  0279               	subwf	___awdiv@dividend+1,w
  2626     044A  1D03               	skipz
  2627     044B  2C4E               	goto	u475
  2628     044C  0876               	movf	___awdiv@divisor,w
  2629     044D  0278               	subwf	___awdiv@dividend,w
  2630     044E                     u475:
  2631     044E  1C03               	skipc
  2632     044F  2C51               	goto	u471
  2633     0450  2C52               	goto	u470
  2634     0451                     u471:
  2635     0451  2C59               	goto	l1243
  2636     0452                     u470:
  2637     0452                     l1239:
  2638     0452  0876               	movf	___awdiv@divisor,w
  2639     0453  02F8               	subwf	___awdiv@dividend,f
  2640     0454  0877               	movf	___awdiv@divisor+1,w
  2641     0455  1C03               	skipc
  2642     0456  03F9               	decf	___awdiv@dividend+1,f
  2643     0457  02F9               	subwf	___awdiv@dividend+1,f
  2644     0458                     l1241:
  2645     0458  147C               	bsf	___awdiv@quotient,0
  2646     0459                     l1243:
  2647     0459  3001               	movlw	1
  2648     045A                     u485:
  2649     045A  1003               	clrc
  2650     045B  0CF7               	rrf	___awdiv@divisor+1,f
  2651     045C  0CF6               	rrf	___awdiv@divisor,f
  2652     045D  3EFF               	addlw	-1
  2653     045E  1D03               	skipz
  2654     045F  2C5A               	goto	u485
  2655     0460                     l1245:
  2656     0460  3001               	movlw	1
  2657     0461  02FA               	subwf	___awdiv@counter,f
  2658     0462  1D03               	btfss	3,2
  2659     0463  2C65               	goto	u491
  2660     0464  2C66               	goto	u490
  2661     0465                     u491:
  2662     0465  2C41               	goto	l1237
  2663     0466                     u490:
  2664     0466                     l1247:
  2665     0466  087B               	movf	___awdiv@sign,w
  2666     0467  1903               	btfsc	3,2
  2667     0468  2C6A               	goto	u501
  2668     0469  2C6B               	goto	u500
  2669     046A                     u501:
  2670     046A  2C70               	goto	l1251
  2671     046B                     u500:
  2672     046B                     l1249:
  2673     046B  09FC               	comf	___awdiv@quotient,f
  2674     046C  09FD               	comf	___awdiv@quotient+1,f
  2675     046D  0AFC               	incf	___awdiv@quotient,f
  2676     046E  1903               	skipnz
  2677     046F  0AFD               	incf	___awdiv@quotient+1,f
  2678     0470                     l1251:
  2679     0470  087D               	movf	___awdiv@quotient+1,w
  2680     0471  00F7               	movwf	?___awdiv+1
  2681     0472  087C               	movf	___awdiv@quotient,w
  2682     0473  00F6               	movwf	?___awdiv
  2683     0474                     l438:
  2684     0474  0008               	return
  2685     0475                     __end_of___awdiv:
  2686     0000                     ___latbits      equ	0
  2687     007E                     btemp           set	126	;btemp
  2688     007E                     wtemp0          set	126
  2689                           
  2690                           	psect	idloc
  2691                           
  2692                           ;Config register IDLOC0 @ 0x2000
  2693                           ;	unspecified, using default values
  2694     2000                     	org	8192
  2695     2000  3FFF               	dw	16383
  2696                           
  2697                           ;Config register IDLOC1 @ 0x2001
  2698                           ;	unspecified, using default values
  2699     2001                     	org	8193
  2700     2001  3FFF               	dw	16383
  2701                           
  2702                           ;Config register IDLOC2 @ 0x2002
  2703                           ;	unspecified, using default values
  2704     2002                     	org	8194
  2705     2002  3FFF               	dw	16383
  2706                           
  2707                           ;Config register IDLOC3 @ 0x2003
  2708                           ;	unspecified, using default values
  2709     2003                     	org	8195
  2710     2003  3FFF               	dw	16383
  2711                           
  2712                           	psect	config
  2713                           
  2714                           ;Config register CONFIG @ 0x2007
  2715                           ;	Oscillator Selection bits
  2716                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  2717                           ;	Watchdog Timer Enable bit
  2718                           ;	WDTE = OFF, WDT disabled
  2719                           ;	Power-up Timer Enable bit
  2720                           ;	PWRTE = OFF, PWRT disabled
  2721                           ;	RA5/MCLR/VPP Pin Function Select bit
  2722                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  2723                           ;	Brown-out Detect Enable bit
  2724                           ;	BOREN = OFF, BOD disabled
  2725                           ;	Low-Voltage Programming Enable bit
  2726                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  2727                           ;	Data EE Memory Code Protection bit
  2728                           ;	CPD = OFF, Data memory code protection off
  2729                           ;	Flash Program Memory Code Protection bit
  2730                           ;	CP = OFF, Code protection off
  2731     2007                     	org	8199
  2732     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     18      26
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _get_temp->___awdiv
    _draw_to_LED->___awdiv
    _show_LED3->_convert_to_segment
    _show_LED2->_convert_to_segment
    _show_LED1->_convert_to_segment
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_get_temp

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2626
                                 _TX
                        _draw_to_LED
                           _get_temp
                            _init_ds
                          _show_LED1
                          _show_LED2
                          _show_LED3
 ---------------------------------------------------------------------------------
 (1) _get_temp                                            18    16      2    1024
                                              0 BANK0     18    16      2
                                 _RX
                                 _TX
                            ___awdiv
                             ___wmul
                            _init_ds
 ---------------------------------------------------------------------------------
 (1) _init_ds                                              3     3      0      90
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TX                                                   5     5      0     234
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   3     3      0      72
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _draw_to_LED                                          8     6      2    1104
                                              0 BANK0      8     6      2
                            ___awdiv
                             ___wmul
                          _show_LED1
                          _show_LED2
                          _show_LED3
 ---------------------------------------------------------------------------------
 (1) _show_LED3                                            3     3      0      58
                                              1 COMMON     3     3      0
                 _convert_to_segment
 ---------------------------------------------------------------------------------
 (1) _show_LED2                                            3     3      0      58
                                              1 COMMON     3     3      0
                 _convert_to_segment
 ---------------------------------------------------------------------------------
 (1) _show_LED1                                            3     3      0      58
                                              1 COMMON     3     3      0
                 _convert_to_segment
 ---------------------------------------------------------------------------------
 (2) _convert_to_segment                                   1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     110
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     328
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TX
   _draw_to_LED
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _show_LED1
       _convert_to_segment
     _show_LED2
       _convert_to_segment
     _show_LED3
       _convert_to_segment
   _get_temp
     _RX
     _TX
     ___awdiv
     ___wmul
     _init_ds
   _init_ds
   _show_LED1
   _show_LED2
   _show_LED3

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               48      0       0      0.0%
BITBANK2            48      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     18      26     32.5%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      40      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Nov 30 13:09:09 2024

                        l91 03DC                          l94 0407                          l95 0411  
                        l88 0386                          l98 03AF                          _RX 03AC  
                        _TX 03D5                ___awdiv@sign 007B         ___wmul@multiplicand 0072  
              ?_draw_to_LED 0020                         ?_RX 0070                         ?_TX 0070  
                       l101 03D4                         l104 05C4                         l106 05C8  
                       l140 05F3                         l141 05FD                         l150 0657  
                       l142 0607                         l151 0661                         l143 0611  
                       l135 05CB                         l152 066B                         l144 061B  
                       l153 0675                         l145 0625                         l137 05D5  
                       l161 0353                         l154 067F                         l146 062F  
                       l138 05DF                         l147 0639                         l139 05E9  
                       l155 06C1                         l148 0643                         l164 0366  
                       l149 064D                         l158 0340                         l193 07F1  
                       l285 0393                         l438 0474                         l287 03AB  
                       RX@d 0071                         RX@i 0072                         TX@i 0073  
                       _RA0 0028                         _RB0 0030                         _RB1 0031  
                       _RB2 0032                         _RA4 002C                         _RB3 0033  
                       _RB4 0034                         _RA6 002E                         _RB5 0035  
                       _RA7 002F                         _RB6 0036                         _RB7 0037  
                       u400 03A7                         u401 03A6                         u410 0417  
                       u330 03E0                         u411 0416                         u331 03DF  
                       u500 046B                         u420 0422                         u340 0411  
                       u501 046A                         u421 0421                         u341 0410  
                       u430 0431                         u510 06C8                         u350 03C5  
                       u431 0430                         u511 06C7                         u351 03C4  
                       u520 06E4                         u360 03D3                         u600 04B9  
                       u521 06E3                         u361 03D2                         u601 04B8  
                       u450 0441                         u370 038D                         u530 0759  
                       u610 04C6                         u451 0440                         u371 038C  
                       u531 0758                         u611 04C5                         u540 051B  
                       u620 04E7                         u445 0435                         u525 06E0  
                       u541 051A                         u621 04E6                         u470 0452  
                       u630 04F6                         u471 0451                         u535 0755  
                       u631 04F5                         u560 0547                 _start_delay 0036  
                       u465 0442                         u385 0394                         u561 0546  
                       u625 04E3                         u490 0466                         u570 0493  
                       u491 0465                         u475 044E                         u395 039B  
                       u707 03C8                         u555 052A                         u635 04F2  
                       u571 0492                         u580 049E                         u485 045A  
                       u717 035E                         u581 049D                         u590 04A9  
                       u727 034B                         u591 04A8                         u737 0338  
                       u657 0371                         u667 0379                         u677 0382  
                       u687 03F1                         u697 03FE                        ??_RX 0070  
                      ??_TX 0070                        l1111 0689                        l1201 038D  
                      l1113 0367                        l1211 0412                        l1203 039A  
                      l1107 05CA                        l1123 03D6                        l1115 0367  
                      l1221 0422                        l1213 0413                        l1205 03A1  
                      l1301 07E6                        l1141 03FC                        l1133 03E0  
                      l1125 03D7                        l1117 036F                        l1231 0434  
                      l1223 0427                        l1215 0417                        l1207 03A7  
                      l1151 032F                        l1311 07ED                        l1303 07E7  
                      l1143 0400                        l1135 03E8                        l1127 03D9  
                      l1119 0374                        l1241 0458                        l1233 043B  
                      l1225 0429                        l1217 041C                        l1153 0331  
                      l1161 0344                        l1313 07EE                        l1305 07EA  
                      l1145 0404                        l1137 03EF                        l1129 03DB  
                      l1321 0510                        l1401 04A9                        l1251 0470  
                      l1243 0459                        l1235 043D                        l1227 042B  
                      l1219 041E                        l1155 0334                        l1163 0347  
                      l1171 035A                        l1315 07EF                        l1307 07EB  
                      l1147 0409                        l1139 03F4                        l1331 0531  
                      l1323 0514                        l1411 04CC                        l1403 04B0  
                      l1245 0460                        l1237 0441                        l1229 0431  
                      l1157 033D                        l1165 0350                        l1173 0363  
                      l1317 07F0                        l1309 07EC                        l1261 06E4  
                      l1181 03BD                        l1149 040B                        l1341 053D  
                      l1333 0533                        l1325 0516                        l1421 04FE  
                      l1405 04B9                        l1413 04D2                        l1239 0452  
                      l1247 0466                        l1159 0342                        l1167 0355  
                      l1271 071B                        l1263 06E9                        l1255 06C2  
                      l1191 03CD                        l1183 03BF                        l1175 03AC  
                      l1343 053F                        l1335 0535                        l1327 051B  
                      l1319 050D                        l1415 04DA                        l1407 04C0  
                      l1249 046B                        l1169 0357                        l1281 075F  
                      l1273 073A                        l1265 06EB                        l1257 06C8  
                      l1193 03D3                        l1185 03C5                        l1353 058E  
                      l1345 0541                        l1337 0537                        l1329 0527  
                      l1425 0509                        l1417 04E7                        l1409 04C6  
                      l1291 07BF                        l1283 078C                        l1267 0718  
                      l1259 06D7                        l1275 073D                        l1187 03C6  
                      l1347 0542                        l1339 053A                        l1419 04F6  
                      l1371 0482                        l1363 0475                        l1197 0387  
                      l1293 07C1                        l1285 078F                        l1277 074C  
                      l1269 0719                        l1189 03CB                        l1349 0547  
                      l1381 0487                        l1373 0483                        l1365 047D  
                      l1199 0389                        l1295 07E0                        l1287 0791  
                      l1279 0759                        l1359 05C6                        l1391 0493  
                      l1383 0488                        l1375 0484                        l1367 047E  
                      l1289 07BE                        l1297 07E2                        l1393 0497  
                      l1385 0489                        l1377 0485                        l1369 0481  
                      l1299 07E5                        l1395 0499                        l1387 048A  
                      l1379 0486                        l1397 049E                        l1389 048B  
                      l1399 04A2                        _main 0475                        _init 0034  
                      _temp 0038                        btemp 007E                        start 0000  
       get_temp@temperature 002C                       ?_main 0070             __end_of___awdiv 0475  
                     _CMCON 001F             ___awdiv@divisor 0076                       TX@cmd 0071  
           ___awdiv@counter 007A                       _PORTA 0005                       _TRISA 0085  
                     _TRISB 0086             __end_of_init_ds 0387                       status 0003  
                     wtemp0 007E             __initialization 07F2                draw_to_LED@d 0026  
              draw_to_LED@i 0020            draw_to_LED@d_143 0024                __end_of_main 050D  
                    ??_main 007E               get_temp@temp1 0030               get_temp@temp2 0031  
          ___awdiv@dividend 0078                      TX@temp 0072                      _TRISA0 0428  
          __end_of_get_temp 05C9                      ___wmul 0387                   ??___awdiv 007A  
          ___awdiv@quotient 007C                   ??_init_ds 0070     __end_of__initialization 07FE  
            __pcstackCOMMON 0070                __pidataBANK0 032A                  __end_of_RX 03D5  
                __end_of_TX 0412                  __pbssBANK0 0032                  __pmaintext 0475  
                   ?___wmul 0070                   ?_get_temp 0020                     ___awdiv 0412  
                   __ptext1 050D                     __ptext2 0367                     __ptext3 03D5  
                   __ptext4 03AC                     __ptext5 06C2                     __ptext6 0354  
                   __ptext7 0341                     __ptext8 032E                     __ptext9 05C9  
                   _counter 0032                     _init_ds 0367                  ??_get_temp 0022  
      end_of_initialization 07FE           __end_of_show_LED1 0341           __end_of_show_LED2 0354  
         __end_of_show_LED3 0367  __end_of_convert_to_segment 06C2              __end_of___wmul 03AC  
             ??_draw_to_LED 0022         start_initialization 07F2                    ??___wmul 0074  
   convert_to_segment@value 0070                 __pdataBANK0 0036                   ___latbits 0000  
             __pcstackBANK0 0020         __end_of_draw_to_LED 07F2                    ?___awdiv 0076  
           get_temp@signloc 002E                    ?_init_ds 0070              ___wmul@product 0074  
                show_LED1@c 0073                  show_LED2@c 0073                  show_LED3@c 0073  
                 _show_LED1 032E                   _show_LED2 0341                   _show_LED3 0354  
               _draw_to_LED 06C2           ___wmul@multiplier 0070           get_temp@temp_drob 002F  
        _convert_to_segment 05C9                  ?_show_LED1 0070                  ?_show_LED2 0070  
                ?_show_LED3 0070         ?_convert_to_segment 0070                    __ptext10 0387  
                  __ptext11 0412                    _get_temp 050D        ??_convert_to_segment 0070  
                  _nosensor 0035                  TX@control0 0074                    init_ds@b 0071  
               ??_show_LED1 0071                 ??_show_LED2 0071                 ??_show_LED3 0071  
